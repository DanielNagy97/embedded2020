
embedded2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080019d0  080019d0  000119d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a14  08001a14  000203a8  2**0
                  CONTENTS
  4 .ARM          00000000  08001a14  08001a14  000203a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a14  08001a14  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a14  08001a14  00011a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a18  08001a18  00011a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  08001a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200003a8  08001dc4  000203a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08001dc4  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d81  00000000  00000000  000203d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001228  00000000  00000000  00025152  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000460  00000000  00000000  00026380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  000267e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ca0  00000000  00000000  00026b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c58  00000000  00000000  0003d838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ff1c  00000000  00000000  00042490  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c23ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001118  00000000  00000000  000c2428  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000c3540  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000c3564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003a8 	.word	0x200003a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080019b8 	.word	0x080019b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003ac 	.word	0x200003ac
 8000148:	080019b8 	.word	0x080019b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval intsrand(time(NULL));   // Initialization, should only be called once.
  */
int main(void)
{
 800015c:	b598      	push	{r3, r4, r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fc68 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f816 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f85a 	bl	8000220 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  max_init(0x01);
 800016c:	2001      	movs	r0, #1
 800016e:	f000 f90b 	bl	8000388 <max_init>
  srand(time(NULL));
 8000172:	2000      	movs	r0, #0
 8000174:	f001 fb78 	bl	8001868 <time>
 8000178:	4603      	mov	r3, r0
 800017a:	460c      	mov	r4, r1
 800017c:	4618      	mov	r0, r3
 800017e:	f001 fb4f 	bl	8001820 <srand>
	  	char* eze = "Ű";
		char str[20];
		sprintf(str, "%d, %d", eze[1], strlen(eze));
		scroll_text_left(str, 20, 4);
*/
	  scroll_text_left("Árvíztűrő tükörfúrógép", 40, 12);
 8000182:	220c      	movs	r2, #12
 8000184:	2128      	movs	r1, #40	; 0x28
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <main+0x34>)
 8000188:	f000 fb1a 	bl	80007c0 <scroll_text_left>
 800018c:	e7f9      	b.n	8000182 <main+0x26>
 800018e:	bf00      	nop
 8000190:	080019d0 	.word	0x080019d0

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f001 fb34 	bl	8001810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 ff03 	bl	8000fe8 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e8:	f000 f858 	bl	800029c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f001 f96e 	bl	80014e8 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000212:	f000 f843 	bl	800029c <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_GPIO_Init+0x74>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <MX_GPIO_Init+0x74>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_GPIO_Init+0x74>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0320 	and.w	r3, r3, #32
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_GPIO_Init+0x74>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <MX_GPIO_Init+0x74>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_GPIO_Init+0x74>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	603b      	str	r3, [r7, #0]
 8000262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clock_Pin|cs_Pin|data_Pin, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	21e0      	movs	r1, #224	; 0xe0
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <MX_GPIO_Init+0x78>)
 800026a:	f000 fea5 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : clock_Pin cs_Pin data_Pin */
  GPIO_InitStruct.Pin = clock_Pin|cs_Pin|data_Pin;
 800026e:	23e0      	movs	r3, #224	; 0xe0
 8000270:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	2301      	movs	r3, #1
 8000274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2302      	movs	r3, #2
 800027c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <MX_GPIO_Init+0x78>)
 8000286:	f000 fd3d 	bl	8000d04 <HAL_GPIO_Init>

}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40010800 	.word	0x40010800

0800029c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <write_byte>:
};

uint8_t screen_buffer[NUMBER_OF_CELLS][8] = {0};


void write_byte (uint8_t byte){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	/**
	  * @brief Writing a byte to the MAX7219 led drivers
	  * @param byte The input byte as uint8_t
	  * @return None
	  */
	for (int i = 0; i<8; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e018      	b.n	80002ea <write_byte+0x42>
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2120      	movs	r1, #32
 80002bc:	480e      	ldr	r0, [pc, #56]	; (80002f8 <write_byte+0x50>)
 80002be:	f000 fe7b 	bl	8000fb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (MAXPORT, DATA_PIN, byte&0x80);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	480a      	ldr	r0, [pc, #40]	; (80002f8 <write_byte+0x50>)
 80002d0:	f000 fe72 	bl	8000fb8 <HAL_GPIO_WritePin>
		byte = byte<<1;
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 1);
 80002da:	2201      	movs	r2, #1
 80002dc:	2120      	movs	r1, #32
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <write_byte+0x50>)
 80002e0:	f000 fe6a 	bl	8000fb8 <HAL_GPIO_WritePin>
	for (int i = 0; i<8; i++){
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	3301      	adds	r3, #1
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	dde3      	ble.n	80002b8 <write_byte+0x10>
	}
}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40010800 	.word	0x40010800

080002fc <write_max_cmd>:

void write_max_cmd (uint8_t address, uint8_t cmd){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	460a      	mov	r2, r1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
	  * @brief Sending commands to the MAX7219 led drivers
	  * @param address The register's address as uint8_t
	  * @param cmd The command to the register as uint8_t
	  * @return None
	  */
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2140      	movs	r1, #64	; 0x40
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <write_max_cmd+0x58>)
 8000312:	f000 fe51 	bl	8000fb8 <HAL_GPIO_WritePin>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	e00a      	b.n	8000332 <write_max_cmd+0x36>
		write_byte (address);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffc2 	bl	80002a8 <write_byte>
		write_byte (cmd);
 8000324:	79bb      	ldrb	r3, [r7, #6]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffbe 	bl	80002a8 <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3301      	adds	r3, #1
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	2b03      	cmp	r3, #3
 8000336:	ddf1      	ble.n	800031c <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <write_max_cmd+0x58>)
 800033e:	f000 fe3b 	bl	8000fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <write_max_cmd+0x58>)
 8000348:	f000 fe36 	bl	8000fb8 <HAL_GPIO_WritePin>
}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40010800 	.word	0x40010800

08000358 <max_clear>:

void max_clear(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	/**
	  * @brief Initializing the MAX7219 led drivers
	  * @param None
	  * @return None
	  */
	for(int i = 0; i<8; i++){
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	e00a      	b.n	800037a <max_clear+0x22>
		write_max_cmd(i+1, 0);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	3301      	adds	r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ffc4 	bl	80002fc <write_max_cmd>
	for(int i = 0; i<8; i++){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b07      	cmp	r3, #7
 800037e:	ddf1      	ble.n	8000364 <max_clear+0xc>
	}
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <max_init>:

void max_init (uint8_t brightness){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	/**
	  * @brief Initialising the MAX7219 led drivers
	  * @param brightness The intensity of the screen as uint8_t
	  * @return None
	  */
	max_clear();
 8000392:	f7ff ffe1 	bl	8000358 <max_clear>
	write_max_cmd(0x09, 0x00); /* decoding = 0 */
 8000396:	2100      	movs	r1, #0
 8000398:	2009      	movs	r0, #9
 800039a:	f7ff ffaf 	bl	80002fc <write_max_cmd>
	write_max_cmd(0x0b, 0x07); /* scan limit = 8 */
 800039e:	2107      	movs	r1, #7
 80003a0:	200b      	movs	r0, #11
 80003a2:	f7ff ffab 	bl	80002fc <write_max_cmd>
	write_max_cmd(0x0c, 0x01); /* mode = 1 */
 80003a6:	2101      	movs	r1, #1
 80003a8:	200c      	movs	r0, #12
 80003aa:	f7ff ffa7 	bl	80002fc <write_max_cmd>
	write_max_cmd(0x0f, 0x00); /* test display = 0 */
 80003ae:	2100      	movs	r1, #0
 80003b0:	200f      	movs	r0, #15
 80003b2:	f7ff ffa3 	bl	80002fc <write_max_cmd>
	write_max_cmd(0x0a, brightness);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4619      	mov	r1, r3
 80003ba:	200a      	movs	r0, #10
 80003bc:	f7ff ff9e 	bl	80002fc <write_max_cmd>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <set_byte_on_matrix>:

void set_byte_on_matrix(uint8_t byte, uint8_t row, uint8_t column){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
 80003d2:	460b      	mov	r3, r1
 80003d4:	71bb      	strb	r3, [r7, #6]
 80003d6:	4613      	mov	r3, r2
 80003d8:	717b      	strb	r3, [r7, #5]
	  * @param byte The input byte as uint8_t
	  * @param row Destination row
	  * @param column Destination column
	  * @return None
	  */
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4816      	ldr	r0, [pc, #88]	; (8000438 <set_byte_on_matrix+0x70>)
 80003e0:	f000 fdea 	bl	8000fb8 <HAL_GPIO_WritePin>

	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e015      	b.n	8000416 <set_byte_on_matrix+0x4e>
		if(i == column){
 80003ea:	797b      	ldrb	r3, [r7, #5]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d108      	bne.n	8000404 <set_byte_on_matrix+0x3c>
			write_byte (row);
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff57 	bl	80002a8 <write_byte>
			write_byte (byte);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff53 	bl	80002a8 <write_byte>
 8000402:	e005      	b.n	8000410 <set_byte_on_matrix+0x48>
		}
		else{
			write_byte (0);
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff4f 	bl	80002a8 <write_byte>
			write_byte (0);
 800040a:	2000      	movs	r0, #0
 800040c:	f7ff ff4c 	bl	80002a8 <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2b03      	cmp	r3, #3
 800041a:	dde6      	ble.n	80003ea <set_byte_on_matrix+0x22>
		}
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <set_byte_on_matrix+0x70>)
 8000422:	f000 fdc9 	bl	8000fb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <set_byte_on_matrix+0x70>)
 800042c:	f000 fdc4 	bl	8000fb8 <HAL_GPIO_WritePin>
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40010800 	.word	0x40010800

0800043c <display_screen_buffer>:
	for(int i = 0; i<8; i++){
		set_byte_on_matrix(character[i], i+1, cell);
	}
}

void display_screen_buffer(){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	/**
	  * @brief Displaying the screen buffer on the led matrixes
	  * @param None
	  * @return None
	  */
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 8000442:	2300      	movs	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	e01b      	b.n	8000480 <display_screen_buffer+0x44>
		for(int j = 0; j<8; j++){
 8000448:	2300      	movs	r3, #0
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	e012      	b.n	8000474 <display_screen_buffer+0x38>
			set_byte_on_matrix(screen_buffer[i][j], j+1, i);
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <display_screen_buffer+0x54>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	441a      	add	r2, r3
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	4413      	add	r3, r2
 800045a:	7818      	ldrb	r0, [r3, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	3301      	adds	r3, #1
 8000462:	b2db      	uxtb	r3, r3
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	b2d2      	uxtb	r2, r2
 8000468:	4619      	mov	r1, r3
 800046a:	f7ff ffad 	bl	80003c8 <set_byte_on_matrix>
		for(int j = 0; j<8; j++){
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	2b07      	cmp	r3, #7
 8000478:	dde9      	ble.n	800044e <display_screen_buffer+0x12>
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	3301      	adds	r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b03      	cmp	r3, #3
 8000484:	dde0      	ble.n	8000448 <display_screen_buffer+0xc>
		}
	}
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200003c4 	.word	0x200003c4

08000494 <shift_screen_buffer_left>:
			}
		}
	}
}

void shift_screen_buffer_left(){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
	/**
	  * @brief Shifting the whole screen buffer by 1 bit to the left
	  * @param None
	  * @return None
	  */
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	e040      	b.n	8000522 <shift_screen_buffer_left+0x8e>
		for(int j = 0; j<8; j++){
 80004a0:	2300      	movs	r3, #0
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	e037      	b.n	8000516 <shift_screen_buffer_left+0x82>
			switch (i) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d111      	bne.n	80004d0 <shift_screen_buffer_left+0x3c>
				case 3:
					screen_buffer[i][j] =
						screen_buffer[i][j] << 1;
 80004ac:	4a21      	ldr	r2, [pc, #132]	; (8000534 <shift_screen_buffer_left+0xa0>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	00db      	lsls	r3, r3, #3
 80004b2:	441a      	add	r2, r3
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	b2d9      	uxtb	r1, r3
					screen_buffer[i][j] =
 80004be:	4a1d      	ldr	r2, [pc, #116]	; (8000534 <shift_screen_buffer_left+0xa0>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	441a      	add	r2, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	460a      	mov	r2, r1
 80004cc:	701a      	strb	r2, [r3, #0]
					break;
 80004ce:	e01f      	b.n	8000510 <shift_screen_buffer_left+0x7c>
				default:
					screen_buffer[i][j] =
						screen_buffer[i][j] << 1
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <shift_screen_buffer_left+0xa0>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	441a      	add	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	005b      	lsls	r3, r3, #1
							| ((screen_buffer[i+1][j] & 0x80) >> 7);
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4913      	ldr	r1, [pc, #76]	; (8000534 <shift_screen_buffer_left+0xa0>)
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4419      	add	r1, r3
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	440b      	add	r3, r1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	09db      	lsrs	r3, r3, #7
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b25b      	sxtb	r3, r3
 80004fc:	b2d9      	uxtb	r1, r3
					screen_buffer[i][j] =
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <shift_screen_buffer_left+0xa0>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	441a      	add	r2, r3
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
					break;
 800050e:	bf00      	nop
		for(int j = 0; j<8; j++){
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b07      	cmp	r3, #7
 800051a:	ddc4      	ble.n	80004a6 <shift_screen_buffer_left+0x12>
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	ddbb      	ble.n	80004a0 <shift_screen_buffer_left+0xc>
			}
		}
	}
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200003c4 	.word	0x200003c4

08000538 <get_character>:

uint8_t get_character(int code, uint8_t i){
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
	  * @brief Get a byte from a specified character
	  * @param code The ASCII code of the character
	  * @param i The i.th row of the character
	  * @return character_byte as uint8_t
	  */
	uint8_t character_byte = 0x0;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

	if (code >= 32 && code <= 64){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b1f      	cmp	r3, #31
 800054c:	dd0d      	ble.n	800056a <get_character+0x32>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b40      	cmp	r3, #64	; 0x40
 8000552:	dc0a      	bgt.n	800056a <get_character+0x32>
		character_byte = character_table_special[code-0x20][i];
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1a3 0220 	sub.w	r2, r3, #32
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	4994      	ldr	r1, [pc, #592]	; (80007b0 <get_character+0x278>)
 800055e:	00d2      	lsls	r2, r2, #3
 8000560:	440a      	add	r2, r1
 8000562:	4413      	add	r3, r2
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e11c      	b.n	80007a4 <get_character+0x26c>
	}
	else if (code >= 65 && code <= 90){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b40      	cmp	r3, #64	; 0x40
 800056e:	dd0d      	ble.n	800058c <get_character+0x54>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b5a      	cmp	r3, #90	; 0x5a
 8000574:	dc0a      	bgt.n	800058c <get_character+0x54>
		character_byte = character_table_big[code-0x41][i];
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	498d      	ldr	r1, [pc, #564]	; (80007b4 <get_character+0x27c>)
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	440a      	add	r2, r1
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e10b      	b.n	80007a4 <get_character+0x26c>
	}
	else if (code >= 97 && code <= 122){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b60      	cmp	r3, #96	; 0x60
 8000590:	dd0d      	ble.n	80005ae <get_character+0x76>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b7a      	cmp	r3, #122	; 0x7a
 8000596:	dc0a      	bgt.n	80005ae <get_character+0x76>
		character_byte = character_table_small[code-0x61][i];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800059e:	78fb      	ldrb	r3, [r7, #3]
 80005a0:	4985      	ldr	r1, [pc, #532]	; (80007b8 <get_character+0x280>)
 80005a2:	00d2      	lsls	r2, r2, #3
 80005a4:	440a      	add	r2, r1
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e0fa      	b.n	80007a4 <get_character+0x26c>
	}
	else{
		switch (code) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3b81      	subs	r3, #129	; 0x81
 80005b2:	2b3b      	cmp	r3, #59	; 0x3b
 80005b4:	f200 80f5 	bhi.w	80007a2 <get_character+0x26a>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <get_character+0x88>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080006b1 	.word	0x080006b1
 80005c4:	080007a3 	.word	0x080007a3
 80005c8:	080007a3 	.word	0x080007a3
 80005cc:	080007a3 	.word	0x080007a3
 80005d0:	080007a3 	.word	0x080007a3
 80005d4:	080007a3 	.word	0x080007a3
 80005d8:	080007a3 	.word	0x080007a3
 80005dc:	080007a3 	.word	0x080007a3
 80005e0:	080006bb 	.word	0x080006bb
 80005e4:	080007a3 	.word	0x080007a3
 80005e8:	080007a3 	.word	0x080007a3
 80005ec:	080007a3 	.word	0x080007a3
 80005f0:	080006c7 	.word	0x080006c7
 80005f4:	080007a3 	.word	0x080007a3
 80005f8:	080007a3 	.word	0x080007a3
 80005fc:	080006ed 	.word	0x080006ed
 8000600:	0800076b 	.word	0x0800076b
 8000604:	080007a3 	.word	0x080007a3
 8000608:	080006d3 	.word	0x080006d3
 800060c:	080007a3 	.word	0x080007a3
 8000610:	080007a3 	.word	0x080007a3
 8000614:	080006df 	.word	0x080006df
 8000618:	080007a3 	.word	0x080007a3
 800061c:	080007a3 	.word	0x080007a3
 8000620:	080007a3 	.word	0x080007a3
 8000624:	080006fb 	.word	0x080006fb
 8000628:	080007a3 	.word	0x080007a3
 800062c:	08000709 	.word	0x08000709
 8000630:	080007a3 	.word	0x080007a3
 8000634:	080007a3 	.word	0x080007a3
 8000638:	080007a3 	.word	0x080007a3
 800063c:	080007a3 	.word	0x080007a3
 8000640:	08000725 	.word	0x08000725
 8000644:	080007a3 	.word	0x080007a3
 8000648:	080007a3 	.word	0x080007a3
 800064c:	080007a3 	.word	0x080007a3
 8000650:	080007a3 	.word	0x080007a3
 8000654:	080007a3 	.word	0x080007a3
 8000658:	080007a3 	.word	0x080007a3
 800065c:	080007a3 	.word	0x080007a3
 8000660:	08000733 	.word	0x08000733
 8000664:	080007a3 	.word	0x080007a3
 8000668:	080007a3 	.word	0x080007a3
 800066c:	080007a3 	.word	0x080007a3
 8000670:	08000741 	.word	0x08000741
 8000674:	080007a3 	.word	0x080007a3
 8000678:	080007a3 	.word	0x080007a3
 800067c:	08000717 	.word	0x08000717
 8000680:	08000795 	.word	0x08000795
 8000684:	080007a3 	.word	0x080007a3
 8000688:	0800074f 	.word	0x0800074f
 800068c:	080007a3 	.word	0x080007a3
 8000690:	080007a3 	.word	0x080007a3
 8000694:	0800075d 	.word	0x0800075d
 8000698:	080007a3 	.word	0x080007a3
 800069c:	080007a3 	.word	0x080007a3
 80006a0:	080007a3 	.word	0x080007a3
 80006a4:	08000779 	.word	0x08000779
 80006a8:	080007a3 	.word	0x080007a3
 80006ac:	08000787 	.word	0x08000787
			case 129: /* 129 Á */
				character_byte = character_table_hun[0][i];
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	4a42      	ldr	r2, [pc, #264]	; (80007bc <get_character+0x284>)
 80006b4:	5cd3      	ldrb	r3, [r2, r3]
 80006b6:	73fb      	strb	r3, [r7, #15]
				break;
 80006b8:	e074      	b.n	80007a4 <get_character+0x26c>
			case 137: /* É */
				character_byte = character_table_hun[1][i];
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	4a3f      	ldr	r2, [pc, #252]	; (80007bc <get_character+0x284>)
 80006be:	4413      	add	r3, r2
 80006c0:	7a1b      	ldrb	r3, [r3, #8]
 80006c2:	73fb      	strb	r3, [r7, #15]
				break;
 80006c4:	e06e      	b.n	80007a4 <get_character+0x26c>
			case 141: /* Í */
				character_byte = character_table_hun[2][i];
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4a3c      	ldr	r2, [pc, #240]	; (80007bc <get_character+0x284>)
 80006ca:	4413      	add	r3, r2
 80006cc:	7c1b      	ldrb	r3, [r3, #16]
 80006ce:	73fb      	strb	r3, [r7, #15]
				break;
 80006d0:	e068      	b.n	80007a4 <get_character+0x26c>
			case 147: /* Ó */
				character_byte = character_table_hun[3][i];
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	4a39      	ldr	r2, [pc, #228]	; (80007bc <get_character+0x284>)
 80006d6:	4413      	add	r3, r2
 80006d8:	7e1b      	ldrb	r3, [r3, #24]
 80006da:	73fb      	strb	r3, [r7, #15]
				break;
 80006dc:	e062      	b.n	80007a4 <get_character+0x26c>
			case 150: /* Ö */
				character_byte = character_table_hun[4][i];
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	4a36      	ldr	r2, [pc, #216]	; (80007bc <get_character+0x284>)
 80006e2:	4413      	add	r3, r2
 80006e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006e8:	73fb      	strb	r3, [r7, #15]
				break;
 80006ea:	e05b      	b.n	80007a4 <get_character+0x26c>
			case 144: /* Ő */
				character_byte = character_table_hun[5][i];
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	4a33      	ldr	r2, [pc, #204]	; (80007bc <get_character+0x284>)
 80006f0:	4413      	add	r3, r2
 80006f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80006f6:	73fb      	strb	r3, [r7, #15]
				break;
 80006f8:	e054      	b.n	80007a4 <get_character+0x26c>
			case 154: /* Ú */
				character_byte = character_table_hun[6][i];
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <get_character+0x284>)
 80006fe:	4413      	add	r3, r2
 8000700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000704:	73fb      	strb	r3, [r7, #15]
				break;
 8000706:	e04d      	b.n	80007a4 <get_character+0x26c>
			case 156: /* Ü */
				character_byte = character_table_hun[7][i];
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <get_character+0x284>)
 800070c:	4413      	add	r3, r2
 800070e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000712:	73fb      	strb	r3, [r7, #15]
				break;
 8000714:	e046      	b.n	80007a4 <get_character+0x26c>
			case 176: /* Ű */
				character_byte = character_table_hun[8][i];
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <get_character+0x284>)
 800071a:	4413      	add	r3, r2
 800071c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000720:	73fb      	strb	r3, [r7, #15]
				break;
 8000722:	e03f      	b.n	80007a4 <get_character+0x26c>
			case 161: /* á */
				character_byte = character_table_hun[9][i];
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <get_character+0x284>)
 8000728:	4413      	add	r3, r2
 800072a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800072e:	73fb      	strb	r3, [r7, #15]
				break;
 8000730:	e038      	b.n	80007a4 <get_character+0x26c>
			case 169: /* é */
				character_byte = character_table_hun[10][i];
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <get_character+0x284>)
 8000736:	4413      	add	r3, r2
 8000738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800073c:	73fb      	strb	r3, [r7, #15]
				break;
 800073e:	e031      	b.n	80007a4 <get_character+0x26c>
			case 173: /* í */
				character_byte = character_table_hun[11][i];
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <get_character+0x284>)
 8000744:	4413      	add	r3, r2
 8000746:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800074a:	73fb      	strb	r3, [r7, #15]
				break;
 800074c:	e02a      	b.n	80007a4 <get_character+0x26c>
			case 179: /* ó */
				character_byte = character_table_hun[12][i];
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <get_character+0x284>)
 8000752:	4413      	add	r3, r2
 8000754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000758:	73fb      	strb	r3, [r7, #15]
				break;
 800075a:	e023      	b.n	80007a4 <get_character+0x26c>
			case 182: /* ö */
				character_byte = character_table_hun[13][i];
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <get_character+0x284>)
 8000760:	4413      	add	r3, r2
 8000762:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000766:	73fb      	strb	r3, [r7, #15]
				break;
 8000768:	e01c      	b.n	80007a4 <get_character+0x26c>
			case 145: /* ő */
				character_byte = character_table_hun[14][i];
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <get_character+0x284>)
 800076e:	4413      	add	r3, r2
 8000770:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8000774:	73fb      	strb	r3, [r7, #15]
				break;
 8000776:	e015      	b.n	80007a4 <get_character+0x26c>
			case 186: /* ú */
				character_byte = character_table_hun[15][i];
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <get_character+0x284>)
 800077c:	4413      	add	r3, r2
 800077e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8000782:	73fb      	strb	r3, [r7, #15]
				break;
 8000784:	e00e      	b.n	80007a4 <get_character+0x26c>
			case 188: /* ü */
				character_byte = character_table_hun[16][i];
 8000786:	78fb      	ldrb	r3, [r7, #3]
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <get_character+0x284>)
 800078a:	4413      	add	r3, r2
 800078c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000790:	73fb      	strb	r3, [r7, #15]
				break;
 8000792:	e007      	b.n	80007a4 <get_character+0x26c>
			case 177: /* ű */
				character_byte = character_table_hun[17][i];
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <get_character+0x284>)
 8000798:	4413      	add	r3, r2
 800079a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800079e:	73fb      	strb	r3, [r7, #15]
				break;
 80007a0:	e000      	b.n	80007a4 <get_character+0x26c>
			default:
				/* character_byte = 0x0; */
				break;
 80007a2:	bf00      	nop
		}
	}
	return character_byte;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000108 	.word	0x20000108
 80007b8:	200001d8 	.word	0x200001d8
 80007bc:	200002a8 	.word	0x200002a8

080007c0 <scroll_text_left>:

void scroll_text_left(char* text, uint16_t speed, uint8_t blank_space){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
 80007cc:	4613      	mov	r3, r2
 80007ce:	707b      	strb	r3, [r7, #1]
	  * @param text The input text as char*
	  * @param speed The delay rate of the shifting as uint16_t
	  * @param blank_space The 0 bits after the text as uint8_t
	  * @return None
	  */
	for(int i = 0; i<strlen(text); i++){
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e050      	b.n	8000878 <scroll_text_left+0xb8>
		if(text[i] == 195 || text[i] == 197){
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2bc3      	cmp	r3, #195	; 0xc3
 80007e0:	d046      	beq.n	8000870 <scroll_text_left+0xb0>
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2bc5      	cmp	r3, #197	; 0xc5
 80007ec:	d040      	beq.n	8000870 <scroll_text_left+0xb0>
			continue;
		}
		/* TODO: extend char table with widths! j=char_width */
		for(int j = 5; j>=0; j--){
 80007ee:	2305      	movs	r3, #5
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	e039      	b.n	8000868 <scroll_text_left+0xa8>
			shift_screen_buffer_left();
 80007f4:	f7ff fe4e 	bl	8000494 <shift_screen_buffer_left>
			for(int k = 0; k<8; k++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e028      	b.n	8000850 <scroll_text_left+0x90>
				/* bit masking - The k.th bit of n: (n & ( 1 << k )) >> k */
				screen_buffer[3][k] =
				    screen_buffer[3][k]
 80007fe:	4a2d      	ldr	r2, [pc, #180]	; (80008b4 <scroll_text_left+0xf4>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	3318      	adds	r3, #24
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b25c      	sxtb	r4, r3
						  | (get_character(text[i], k) & ( 1 << j )) >> j;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f7ff fe8c 	bl	8000538 <get_character>
 8000820:	4603      	mov	r3, r0
 8000822:	4619      	mov	r1, r3
 8000824:	2201      	movs	r2, #1
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	ea01 0203 	and.w	r2, r1, r3
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	fa42 f303 	asr.w	r3, r2, r3
 8000836:	b25b      	sxtb	r3, r3
 8000838:	4323      	orrs	r3, r4
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2d9      	uxtb	r1, r3
				screen_buffer[3][k] =
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <scroll_text_left+0xf4>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	3318      	adds	r3, #24
 8000846:	460a      	mov	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
			for(int k = 0; k<8; k++){
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b07      	cmp	r3, #7
 8000854:	ddd3      	ble.n	80007fe <scroll_text_left+0x3e>
			}
			display_screen_buffer();
 8000856:	f7ff fdf1 	bl	800043c <display_screen_buffer>
			HAL_Delay(speed);
 800085a:	887b      	ldrh	r3, [r7, #2]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f94b 	bl	8000af8 <HAL_Delay>
		for(int j = 5; j>=0; j--){
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	3b01      	subs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	2b00      	cmp	r3, #0
 800086c:	dac2      	bge.n	80007f4 <scroll_text_left+0x34>
 800086e:	e000      	b.n	8000872 <scroll_text_left+0xb2>
			continue;
 8000870:	bf00      	nop
	for(int i = 0; i<strlen(text); i++){
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fc67 	bl	800014c <strlen>
 800087e:	4602      	mov	r2, r0
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	429a      	cmp	r2, r3
 8000884:	d8a7      	bhi.n	80007d6 <scroll_text_left+0x16>
		}
	}
	/* Making blank space after the text */
	for(int i = 0; i<blank_space; i++){
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	e00a      	b.n	80008a2 <scroll_text_left+0xe2>
		shift_screen_buffer_left();
 800088c:	f7ff fe02 	bl	8000494 <shift_screen_buffer_left>
		display_screen_buffer();
 8000890:	f7ff fdd4 	bl	800043c <display_screen_buffer>
		HAL_Delay(speed);
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f92e 	bl	8000af8 <HAL_Delay>
	for(int i = 0; i<blank_space; i++){
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3301      	adds	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	787b      	ldrb	r3, [r7, #1]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dbf0      	blt.n	800088c <scroll_text_left+0xcc>
	}
}
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200003c4 	.word	0x200003c4

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_MspInit+0x5c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_MspInit+0x5c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x5c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x5c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_MspInit+0x60>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_MspInit+0x60>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <HardFault_Handler+0x4>

0800092e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <BusFault_Handler+0x4>

0800093a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <UsageFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f8aa 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <_sbrk+0x5c>)
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <_sbrk+0x60>)
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <_sbrk+0x64>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <_sbrk+0x68>)
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d207      	bcs.n	80009b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a0:	f000 ff0c 	bl	80017bc <__errno>
 80009a4:	4602      	mov	r2, r0
 80009a6:	230c      	movs	r3, #12
 80009a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ae:	e009      	b.n	80009c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <_sbrk+0x64>)
 80009c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20005000 	.word	0x20005000
 80009d0:	00000400 	.word	0x00000400
 80009d4:	200003e4 	.word	0x200003e4
 80009d8:	200003f8 	.word	0x200003f8

080009dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ffe5 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f000 fed9 	bl	80017c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fba1 	bl	800015c <main>
  bx lr
 8000a1a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a1c:	08001a1c 	.word	0x08001a1c
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a24:	200003a8 	.word	0x200003a8
  ldr r2, =_sbss
 8000a28:	200003a8 	.word	0x200003a8
  ldr r3, = _ebss
 8000a2c:	200003f8 	.word	0x200003f8

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f929 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff ff32 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f933 	bl	8000cea <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a9c:	f000 f909 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000338 	.word	0x20000338
 8000ab8:	20000340 	.word	0x20000340
 8000abc:	2000033c 	.word	0x2000033c

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000340 	.word	0x20000340
 8000ae0:	200003f0 	.word	0x200003f0

08000ae4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	200003f0 	.word	0x200003f0

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_Delay+0x40>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1e:	bf00      	nop
 8000b20:	f7ff ffe0 	bl	8000ae4 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000340 	.word	0x20000340

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f7ff ff90 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff49 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff90 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5f 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e127      	b.n	8000f68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8116 	bne.w	8000f62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d034      	beq.n	8000da8 <HAL_GPIO_Init+0xa4>
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d80d      	bhi.n	8000d5e <HAL_GPIO_Init+0x5a>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x9a>
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d804      	bhi.n	8000d54 <HAL_GPIO_Init+0x50>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d031      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d01c      	beq.n	8000d8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e048      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d043      	beq.n	8000de0 <HAL_GPIO_Init+0xdc>
 8000d58:	2b11      	cmp	r3, #17
 8000d5a:	d01b      	beq.n	8000d94 <HAL_GPIO_Init+0x90>
          break;
 8000d5c:	e043      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5e:	4a89      	ldr	r2, [pc, #548]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d026      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d64:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d806      	bhi.n	8000d78 <HAL_GPIO_Init+0x74>
 8000d6a:	4a87      	ldr	r2, [pc, #540]	; (8000f88 <HAL_GPIO_Init+0x284>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d020      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d70:	4a86      	ldr	r2, [pc, #536]	; (8000f8c <HAL_GPIO_Init+0x288>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01d      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d76:	e036      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d78:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x28c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d7e:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <HAL_GPIO_Init+0x290>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d016      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d84:	4a84      	ldr	r2, [pc, #528]	; (8000f98 <HAL_GPIO_Init+0x294>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e028      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e023      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01e      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e019      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e012      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e008      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d801      	bhi.n	8000df0 <HAL_GPIO_Init+0xec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	e001      	b.n	8000df4 <HAL_GPIO_Init+0xf0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3304      	adds	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d802      	bhi.n	8000e02 <HAL_GPIO_Init+0xfe>
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x104>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3b08      	subs	r3, #8
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	210f      	movs	r1, #15
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	6a39      	ldr	r1, [r7, #32]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	431a      	orrs	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8096 	beq.w	8000f62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e4e:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4b      	ldr	r2, [pc, #300]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x19e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x19a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x196>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x192>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4933      	ldr	r1, [pc, #204]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	492e      	ldr	r1, [pc, #184]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	4924      	ldr	r1, [pc, #144]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	608b      	str	r3, [r1, #8]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	491a      	ldr	r1, [pc, #104]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60cb      	str	r3, [r1, #12]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4915      	ldr	r1, [pc, #84]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f aed0 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	372c      	adds	r7, #44	; 0x2c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	10120000 	.word	0x10120000
 8000f90:	10310000 	.word	0x10310000
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	611a      	str	r2, [r3, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e26c      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8087 	beq.w	8001116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00c      	beq.n	800102e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001014:	4b8f      	ldr	r3, [pc, #572]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d112      	bne.n	8001046 <HAL_RCC_OscConfig+0x5e>
 8001020:	4b8c      	ldr	r3, [pc, #560]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102c:	d10b      	bne.n	8001046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	4b89      	ldr	r3, [pc, #548]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d06c      	beq.n	8001114 <HAL_RCC_OscConfig+0x12c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d168      	bne.n	8001114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e246      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x76>
 8001050:	4b80      	ldr	r3, [pc, #512]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a7f      	ldr	r2, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e02e      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x98>
 8001066:	4b7b      	ldr	r3, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a7a      	ldr	r2, [pc, #488]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b78      	ldr	r3, [pc, #480]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a77      	ldr	r2, [pc, #476]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e01d      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0xbc>
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a71      	ldr	r2, [pc, #452]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xd4>
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a6a      	ldr	r2, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a67      	ldr	r2, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd0e 	bl	8000ae4 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fd0a 	bl	8000ae4 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1fa      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0xe4>
 80010ea:	e014      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcfa 	bl	8000ae4 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcf6 	bl	8000ae4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1e6      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	4b53      	ldr	r3, [pc, #332]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x10c>
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d063      	beq.n	80011ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b08      	cmp	r3, #8
 8001138:	d11c      	bne.n	8001174 <HAL_RCC_OscConfig+0x18c>
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x176>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e1ba      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4939      	ldr	r1, [pc, #228]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	e03a      	b.n	80011ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_RCC_OscConfig+0x270>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fcaf 	bl	8000ae4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fcab 	bl	8000ae4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e19b      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4927      	ldr	r1, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
 80011bc:	e015      	b.n	80011ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_RCC_OscConfig+0x270>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc8e 	bl	8000ae4 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fc8a 	bl	8000ae4 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e17a      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d03a      	beq.n	800126c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d019      	beq.n	8001232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_RCC_OscConfig+0x274>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fc6e 	bl	8000ae4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120c:	f7ff fc6a 	bl	8000ae4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e15a      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_RCC_OscConfig+0x26c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f000 faa8 	bl	8001780 <RCC_Delay>
 8001230:	e01c      	b.n	800126c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_RCC_OscConfig+0x274>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fc54 	bl	8000ae4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123e:	e00f      	b.n	8001260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fc50 	bl	8000ae4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d908      	bls.n	8001260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e140      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	42420000 	.word	0x42420000
 800125c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	4b9e      	ldr	r3, [pc, #632]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e9      	bne.n	8001240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a6 	beq.w	80013c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127e:	4b97      	ldr	r3, [pc, #604]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b94      	ldr	r3, [pc, #592]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a93      	ldr	r2, [pc, #588]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b91      	ldr	r3, [pc, #580]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a2:	2301      	movs	r3, #1
 80012a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4b8e      	ldr	r3, [pc, #568]	; (80014e0 <HAL_RCC_OscConfig+0x4f8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d118      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <HAL_RCC_OscConfig+0x4f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a8a      	ldr	r2, [pc, #552]	; (80014e0 <HAL_RCC_OscConfig+0x4f8>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc11 	bl	8000ae4 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7ff fc0d 	bl	8000ae4 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b64      	cmp	r3, #100	; 0x64
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e0fd      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x4f8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x312>
 80012ec:	4b7b      	ldr	r3, [pc, #492]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a7a      	ldr	r2, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	e02d      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x334>
 8001302:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a75      	ldr	r2, [pc, #468]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	4b73      	ldr	r3, [pc, #460]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a72      	ldr	r2, [pc, #456]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	e01c      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x356>
 8001324:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a6c      	ldr	r2, [pc, #432]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a69      	ldr	r2, [pc, #420]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x36e>
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a66      	ldr	r2, [pc, #408]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6213      	str	r3, [r2, #32]
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a63      	ldr	r2, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbc1 	bl	8000ae4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fbbd 	bl	8000ae4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0ab      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ee      	beq.n	8001366 <HAL_RCC_OscConfig+0x37e>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fbab 	bl	8000ae4 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fba7 	bl	8000ae4 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e095      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d105      	bne.n	80013c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ba:	4b48      	ldr	r3, [pc, #288]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a47      	ldr	r2, [pc, #284]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8081 	beq.w	80014d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d061      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d146      	bne.n	8001472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_RCC_OscConfig+0x4fc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb7b 	bl	8000ae4 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb77 	bl	8000ae4 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e067      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d108      	bne.n	800142c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	492d      	ldr	r1, [pc, #180]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a19      	ldr	r1, [r3, #32]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	430b      	orrs	r3, r1
 800143e:	4927      	ldr	r1, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_RCC_OscConfig+0x4fc>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144a:	f7ff fb4b 	bl	8000ae4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fb47 	bl	8000ae4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e037      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x46a>
 8001470:	e02f      	b.n	80014d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_RCC_OscConfig+0x4fc>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb34 	bl	8000ae4 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb30 	bl	8000ae4 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e020      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x498>
 800149e:	e018      	b.n	80014d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e013      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d106      	bne.n	80014ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42420060 	.word	0x42420060

080014e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0d0      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4965      	ldr	r1, [pc, #404]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800154e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d040      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e073      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06b      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fa84 	bl	8000ae4 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff fa80 	bl	8000ae4 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e053      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d210      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4922      	ldr	r1, [pc, #136]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4601      	mov	r1, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	fa21 f303 	lsr.w	r3, r1, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f9e2 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08001a04 	.word	0x08001a04
 80016b4:	20000338 	.word	0x20000338
 80016b8:	2000033c 	.word	0x2000033c

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b490      	push	{r4, r7}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c4:	1d3c      	adds	r4, r7, #4
 80016c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x40>
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x46>
 80016fa:	e02d      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016fe:	623b      	str	r3, [r7, #32]
      break;
 8001700:	e02d      	b.n	800175e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800170e:	4413      	add	r3, r2
 8001710:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001714:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0c5b      	lsrs	r3, r3, #17
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172e:	4413      	add	r3, r2
 8001730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800173a:	fb02 f203 	mul.w	r2, r2, r3
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e004      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_RCC_GetSysClockFreq+0xc0>)
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	623b      	str	r3, [r7, #32]
      break;
 8001756:	e002      	b.n	800175e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_RCC_GetSysClockFreq+0xbc>)
 800175a:	623b      	str	r3, [r7, #32]
      break;
 800175c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800175e:	6a3b      	ldr	r3, [r7, #32]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bc90      	pop	{r4, r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	080019f0 	.word	0x080019f0
 8001770:	08001a00 	.word	0x08001a00
 8001774:	40021000 	.word	0x40021000
 8001778:	007a1200 	.word	0x007a1200
 800177c:	003d0900 	.word	0x003d0900

08001780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <RCC_Delay+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <RCC_Delay+0x38>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800179c:	bf00      	nop
  }
  while (Delay --);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	60fa      	str	r2, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <RCC_Delay+0x1c>
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000338 	.word	0x20000338
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <__errno>:
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <__errno+0x8>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000344 	.word	0x20000344

080017c8 <__libc_init_array>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	2500      	movs	r5, #0
 80017cc:	4e0c      	ldr	r6, [pc, #48]	; (8001800 <__libc_init_array+0x38>)
 80017ce:	4c0d      	ldr	r4, [pc, #52]	; (8001804 <__libc_init_array+0x3c>)
 80017d0:	1ba4      	subs	r4, r4, r6
 80017d2:	10a4      	asrs	r4, r4, #2
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	d109      	bne.n	80017ec <__libc_init_array+0x24>
 80017d8:	f000 f8ee 	bl	80019b8 <_init>
 80017dc:	2500      	movs	r5, #0
 80017de:	4e0a      	ldr	r6, [pc, #40]	; (8001808 <__libc_init_array+0x40>)
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <__libc_init_array+0x44>)
 80017e2:	1ba4      	subs	r4, r4, r6
 80017e4:	10a4      	asrs	r4, r4, #2
 80017e6:	42a5      	cmp	r5, r4
 80017e8:	d105      	bne.n	80017f6 <__libc_init_array+0x2e>
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
 80017ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017f0:	4798      	blx	r3
 80017f2:	3501      	adds	r5, #1
 80017f4:	e7ee      	b.n	80017d4 <__libc_init_array+0xc>
 80017f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017fa:	4798      	blx	r3
 80017fc:	3501      	adds	r5, #1
 80017fe:	e7f2      	b.n	80017e6 <__libc_init_array+0x1e>
 8001800:	08001a14 	.word	0x08001a14
 8001804:	08001a14 	.word	0x08001a14
 8001808:	08001a14 	.word	0x08001a14
 800180c:	08001a18 	.word	0x08001a18

08001810 <memset>:
 8001810:	4603      	mov	r3, r0
 8001812:	4402      	add	r2, r0
 8001814:	4293      	cmp	r3, r2
 8001816:	d100      	bne.n	800181a <memset+0xa>
 8001818:	4770      	bx	lr
 800181a:	f803 1b01 	strb.w	r1, [r3], #1
 800181e:	e7f9      	b.n	8001814 <memset+0x4>

08001820 <srand>:
 8001820:	b538      	push	{r3, r4, r5, lr}
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <srand+0x38>)
 8001824:	4605      	mov	r5, r0
 8001826:	681c      	ldr	r4, [r3, #0]
 8001828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800182a:	b97b      	cbnz	r3, 800184c <srand+0x2c>
 800182c:	2018      	movs	r0, #24
 800182e:	f000 f847 	bl	80018c0 <malloc>
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <srand+0x3c>)
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <srand+0x40>)
 8001836:	63a0      	str	r0, [r4, #56]	; 0x38
 8001838:	e9c0 2300 	strd	r2, r3, [r0]
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <srand+0x44>)
 800183e:	2201      	movs	r2, #1
 8001840:	6083      	str	r3, [r0, #8]
 8001842:	230b      	movs	r3, #11
 8001844:	8183      	strh	r3, [r0, #12]
 8001846:	2300      	movs	r3, #0
 8001848:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800184c:	2200      	movs	r2, #0
 800184e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001850:	611d      	str	r5, [r3, #16]
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	bd38      	pop	{r3, r4, r5, pc}
 8001856:	bf00      	nop
 8001858:	20000344 	.word	0x20000344
 800185c:	abcd330e 	.word	0xabcd330e
 8001860:	e66d1234 	.word	0xe66d1234
 8001864:	0005deec 	.word	0x0005deec

08001868 <time>:
 8001868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <time+0x30>)
 800186c:	4604      	mov	r4, r0
 800186e:	2200      	movs	r2, #0
 8001870:	4669      	mov	r1, sp
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	f000 f812 	bl	800189c <_gettimeofday_r>
 8001878:	2800      	cmp	r0, #0
 800187a:	da05      	bge.n	8001888 <time+0x20>
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001884:	e9cd 2300 	strd	r2, r3, [sp]
 8001888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800188c:	b10c      	cbz	r4, 8001892 <time+0x2a>
 800188e:	e9c4 0100 	strd	r0, r1, [r4]
 8001892:	b004      	add	sp, #16
 8001894:	bd10      	pop	{r4, pc}
 8001896:	bf00      	nop
 8001898:	20000344 	.word	0x20000344

0800189c <_gettimeofday_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	2300      	movs	r3, #0
 80018a0:	4c06      	ldr	r4, [pc, #24]	; (80018bc <_gettimeofday_r+0x20>)
 80018a2:	4605      	mov	r5, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	6023      	str	r3, [r4, #0]
 80018aa:	f000 f87d 	bl	80019a8 <_gettimeofday>
 80018ae:	1c43      	adds	r3, r0, #1
 80018b0:	d102      	bne.n	80018b8 <_gettimeofday_r+0x1c>
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	b103      	cbz	r3, 80018b8 <_gettimeofday_r+0x1c>
 80018b6:	602b      	str	r3, [r5, #0]
 80018b8:	bd38      	pop	{r3, r4, r5, pc}
 80018ba:	bf00      	nop
 80018bc:	200003f4 	.word	0x200003f4

080018c0 <malloc>:
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <malloc+0xc>)
 80018c2:	4601      	mov	r1, r0
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	f000 b803 	b.w	80018d0 <_malloc_r>
 80018ca:	bf00      	nop
 80018cc:	20000344 	.word	0x20000344

080018d0 <_malloc_r>:
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	1ccd      	adds	r5, r1, #3
 80018d4:	f025 0503 	bic.w	r5, r5, #3
 80018d8:	3508      	adds	r5, #8
 80018da:	2d0c      	cmp	r5, #12
 80018dc:	bf38      	it	cc
 80018de:	250c      	movcc	r5, #12
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	4606      	mov	r6, r0
 80018e4:	db01      	blt.n	80018ea <_malloc_r+0x1a>
 80018e6:	42a9      	cmp	r1, r5
 80018e8:	d903      	bls.n	80018f2 <_malloc_r+0x22>
 80018ea:	230c      	movs	r3, #12
 80018ec:	6033      	str	r3, [r6, #0]
 80018ee:	2000      	movs	r0, #0
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
 80018f2:	f000 f857 	bl	80019a4 <__malloc_lock>
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <_malloc_r+0xac>)
 80018f8:	6814      	ldr	r4, [r2, #0]
 80018fa:	4621      	mov	r1, r4
 80018fc:	b991      	cbnz	r1, 8001924 <_malloc_r+0x54>
 80018fe:	4c20      	ldr	r4, [pc, #128]	; (8001980 <_malloc_r+0xb0>)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	b91b      	cbnz	r3, 800190c <_malloc_r+0x3c>
 8001904:	4630      	mov	r0, r6
 8001906:	f000 f83d 	bl	8001984 <_sbrk_r>
 800190a:	6020      	str	r0, [r4, #0]
 800190c:	4629      	mov	r1, r5
 800190e:	4630      	mov	r0, r6
 8001910:	f000 f838 	bl	8001984 <_sbrk_r>
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	d124      	bne.n	8001962 <_malloc_r+0x92>
 8001918:	230c      	movs	r3, #12
 800191a:	4630      	mov	r0, r6
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	f000 f842 	bl	80019a6 <__malloc_unlock>
 8001922:	e7e4      	b.n	80018ee <_malloc_r+0x1e>
 8001924:	680b      	ldr	r3, [r1, #0]
 8001926:	1b5b      	subs	r3, r3, r5
 8001928:	d418      	bmi.n	800195c <_malloc_r+0x8c>
 800192a:	2b0b      	cmp	r3, #11
 800192c:	d90f      	bls.n	800194e <_malloc_r+0x7e>
 800192e:	600b      	str	r3, [r1, #0]
 8001930:	18cc      	adds	r4, r1, r3
 8001932:	50cd      	str	r5, [r1, r3]
 8001934:	4630      	mov	r0, r6
 8001936:	f000 f836 	bl	80019a6 <__malloc_unlock>
 800193a:	f104 000b 	add.w	r0, r4, #11
 800193e:	1d23      	adds	r3, r4, #4
 8001940:	f020 0007 	bic.w	r0, r0, #7
 8001944:	1ac3      	subs	r3, r0, r3
 8001946:	d0d3      	beq.n	80018f0 <_malloc_r+0x20>
 8001948:	425a      	negs	r2, r3
 800194a:	50e2      	str	r2, [r4, r3]
 800194c:	e7d0      	b.n	80018f0 <_malloc_r+0x20>
 800194e:	684b      	ldr	r3, [r1, #4]
 8001950:	428c      	cmp	r4, r1
 8001952:	bf16      	itet	ne
 8001954:	6063      	strne	r3, [r4, #4]
 8001956:	6013      	streq	r3, [r2, #0]
 8001958:	460c      	movne	r4, r1
 800195a:	e7eb      	b.n	8001934 <_malloc_r+0x64>
 800195c:	460c      	mov	r4, r1
 800195e:	6849      	ldr	r1, [r1, #4]
 8001960:	e7cc      	b.n	80018fc <_malloc_r+0x2c>
 8001962:	1cc4      	adds	r4, r0, #3
 8001964:	f024 0403 	bic.w	r4, r4, #3
 8001968:	42a0      	cmp	r0, r4
 800196a:	d005      	beq.n	8001978 <_malloc_r+0xa8>
 800196c:	1a21      	subs	r1, r4, r0
 800196e:	4630      	mov	r0, r6
 8001970:	f000 f808 	bl	8001984 <_sbrk_r>
 8001974:	3001      	adds	r0, #1
 8001976:	d0cf      	beq.n	8001918 <_malloc_r+0x48>
 8001978:	6025      	str	r5, [r4, #0]
 800197a:	e7db      	b.n	8001934 <_malloc_r+0x64>
 800197c:	200003e8 	.word	0x200003e8
 8001980:	200003ec 	.word	0x200003ec

08001984 <_sbrk_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	2300      	movs	r3, #0
 8001988:	4c05      	ldr	r4, [pc, #20]	; (80019a0 <_sbrk_r+0x1c>)
 800198a:	4605      	mov	r5, r0
 800198c:	4608      	mov	r0, r1
 800198e:	6023      	str	r3, [r4, #0]
 8001990:	f7fe ffee 	bl	8000970 <_sbrk>
 8001994:	1c43      	adds	r3, r0, #1
 8001996:	d102      	bne.n	800199e <_sbrk_r+0x1a>
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	b103      	cbz	r3, 800199e <_sbrk_r+0x1a>
 800199c:	602b      	str	r3, [r5, #0]
 800199e:	bd38      	pop	{r3, r4, r5, pc}
 80019a0:	200003f4 	.word	0x200003f4

080019a4 <__malloc_lock>:
 80019a4:	4770      	bx	lr

080019a6 <__malloc_unlock>:
 80019a6:	4770      	bx	lr

080019a8 <_gettimeofday>:
 80019a8:	2258      	movs	r2, #88	; 0x58
 80019aa:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <_gettimeofday+0xc>)
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4770      	bx	lr
 80019b4:	200003f4 	.word	0x200003f4

080019b8 <_init>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr

080019c4 <_fini>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr
