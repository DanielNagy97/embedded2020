
embedded2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f5c  08001f5c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08001f5c  08001f5c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f5c  08001f5c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08001f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200000c0  08002024  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002024  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004395  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001002  00000000  00000000  0002447e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000450  00000000  00000000  00025480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001691f  00000000  00000000  00025c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004490  00000000  00000000  0003c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fec6  00000000  00000000  00040a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c08fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001390  00000000  00000000  000c0978  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000c1d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000c1d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ee8 	.word	0x08001ee8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08001ee8 	.word	0x08001ee8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <write_byte>:
{0x1e, 0x33, 0x33, 0x1e, 0x33, 0x33, 0x1e, 0x0},//8
{0x1e, 0x33, 0x33, 0x1f, 0x3,  0x33, 0x1e, 0x0},//9
};


void write_byte (uint8_t byte){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i<8; i++){
 8000166:	2300      	movs	r3, #0
 8000168:	60fb      	str	r3, [r7, #12]
 800016a:	e018      	b.n	800019e <write_byte+0x42>
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 0);
 800016c:	2200      	movs	r2, #0
 800016e:	2120      	movs	r1, #32
 8000170:	480e      	ldr	r0, [pc, #56]	; (80001ac <write_byte+0x50>)
 8000172:	f000 fddf 	bl	8000d34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (MAXPORT, DATA_PIN, byte&0x80);  // most significant bit
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800017c:	b2db      	uxtb	r3, r3
 800017e:	461a      	mov	r2, r3
 8000180:	2180      	movs	r1, #128	; 0x80
 8000182:	480a      	ldr	r0, [pc, #40]	; (80001ac <write_byte+0x50>)
 8000184:	f000 fdd6 	bl	8000d34 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 1);
 800018e:	2201      	movs	r2, #1
 8000190:	2120      	movs	r1, #32
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <write_byte+0x50>)
 8000194:	f000 fdce 	bl	8000d34 <HAL_GPIO_WritePin>
	for (int i = 0; i<8; i++){
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	3301      	adds	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
 800019e:	68fb      	ldr	r3, [r7, #12]
 80001a0:	2b07      	cmp	r3, #7
 80001a2:	dde3      	ble.n	800016c <write_byte+0x10>
	}
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010800 	.word	0x40010800

080001b0 <write_max_cmd>:

void write_max_cmd (uint8_t address, uint8_t cmd){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2140      	movs	r1, #64	; 0x40
 80001c4:	4810      	ldr	r0, [pc, #64]	; (8000208 <write_max_cmd+0x58>)
 80001c6:	f000 fdb5 	bl	8000d34 <HAL_GPIO_WritePin>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
 80001ce:	e00a      	b.n	80001e6 <write_max_cmd+0x36>
		write_byte (address);
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f7ff ffc2 	bl	800015c <write_byte>
		write_byte (cmd);
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffbe 	bl	800015c <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	3301      	adds	r3, #1
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	2b03      	cmp	r3, #3
 80001ea:	ddf1      	ble.n	80001d0 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2140      	movs	r1, #64	; 0x40
 80001f0:	4805      	ldr	r0, [pc, #20]	; (8000208 <write_max_cmd+0x58>)
 80001f2:	f000 fd9f 	bl	8000d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2140      	movs	r1, #64	; 0x40
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <write_max_cmd+0x58>)
 80001fc:	f000 fd9a 	bl	8000d34 <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40010800 	.word	0x40010800

0800020c <max_clear>:

void max_clear(){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for(int i = 0; i<8; i++){
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e00a      	b.n	800022e <max_clear+0x22>
		write_max_cmd(i+1, 0);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	b2db      	uxtb	r3, r3
 800021c:	3301      	adds	r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffc4 	bl	80001b0 <write_max_cmd>
	for(int i = 0; i<8; i++){
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b07      	cmp	r3, #7
 8000232:	ddf1      	ble.n	8000218 <max_clear+0xc>
	}
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <max_init>:

void max_init (uint8_t brightness){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	max_clear();
 8000246:	f7ff ffe1 	bl	800020c <max_clear>
	write_max_cmd(0x09, 0x00);// decoding = 0
 800024a:	2100      	movs	r1, #0
 800024c:	2009      	movs	r0, #9
 800024e:	f7ff ffaf 	bl	80001b0 <write_max_cmd>
	write_max_cmd(0x0b, 0x07);// scan limit = 8
 8000252:	2107      	movs	r1, #7
 8000254:	200b      	movs	r0, #11
 8000256:	f7ff ffab 	bl	80001b0 <write_max_cmd>
	write_max_cmd(0x0c, 0x01);// mode = 1
 800025a:	2101      	movs	r1, #1
 800025c:	200c      	movs	r0, #12
 800025e:	f7ff ffa7 	bl	80001b0 <write_max_cmd>
	write_max_cmd(0x0f, 0x00);// test display = 0
 8000262:	2100      	movs	r1, #0
 8000264:	200f      	movs	r0, #15
 8000266:	f7ff ffa3 	bl	80001b0 <write_max_cmd>

	write_max_cmd(0x0a, brightness);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	4619      	mov	r1, r3
 800026e:	200a      	movs	r0, #10
 8000270:	f7ff ff9e 	bl	80001b0 <write_max_cmd>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <set_byte_on_matrix>:

void set_byte_on_matrix(uint8_t byte, uint8_t row, uint8_t col, uint8_t shift){
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	4604      	mov	r4, r0
 8000284:	4608      	mov	r0, r1
 8000286:	4611      	mov	r1, r2
 8000288:	461a      	mov	r2, r3
 800028a:	4623      	mov	r3, r4
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	4603      	mov	r3, r0
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	460b      	mov	r3, r1
 8000294:	717b      	strb	r3, [r7, #5]
 8000296:	4613      	mov	r3, r2
 8000298:	713b      	strb	r3, [r7, #4]
	//Setting one byte on the 8 rows 4 columns matrix
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2140      	movs	r1, #64	; 0x40
 800029e:	4818      	ldr	r0, [pc, #96]	; (8000300 <set_byte_on_matrix+0x84>)
 80002a0:	f000 fd48 	bl	8000d34 <HAL_GPIO_WritePin>

	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e019      	b.n	80002de <set_byte_on_matrix+0x62>
		if(i == col){
 80002aa:	797b      	ldrb	r3, [r7, #5]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d10c      	bne.n	80002cc <set_byte_on_matrix+0x50>
			write_byte (row);
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff51 	bl	800015c <write_byte>
			write_byte (byte << shift);
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	793b      	ldrb	r3, [r7, #4]
 80002be:	fa02 f303 	lsl.w	r3, r2, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff49 	bl	800015c <write_byte>
 80002ca:	e005      	b.n	80002d8 <set_byte_on_matrix+0x5c>
		}
		else{
			write_byte (0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff45 	bl	800015c <write_byte>
			write_byte (0);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f7ff ff42 	bl	800015c <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	dde2      	ble.n	80002aa <set_byte_on_matrix+0x2e>
		}
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	4805      	ldr	r0, [pc, #20]	; (8000300 <set_byte_on_matrix+0x84>)
 80002ea:	f000 fd23 	bl	8000d34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <set_byte_on_matrix+0x84>)
 80002f4:	f000 fd1e 	bl	8000d34 <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd90      	pop	{r4, r7, pc}
 8000300:	40010800 	.word	0x40010800

08000304 <display_screen_buffer>:
}

uint8_t screen_buffer[NUMBER_OF_CELLS][8] = {0};


void display_screen_buffer(){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	e01b      	b.n	8000348 <display_screen_buffer+0x44>
		for(int j = 0; j<8; j++){
 8000310:	2300      	movs	r3, #0
 8000312:	603b      	str	r3, [r7, #0]
 8000314:	e012      	b.n	800033c <display_screen_buffer+0x38>
			set_byte_on_matrix(screen_buffer[i][j], j+1, i, 0);
 8000316:	4a10      	ldr	r2, [pc, #64]	; (8000358 <display_screen_buffer+0x54>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	441a      	add	r2, r3
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	4413      	add	r3, r2
 8000322:	7818      	ldrb	r0, [r3, #0]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	3301      	adds	r3, #1
 800032a:	b2d9      	uxtb	r1, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	b2da      	uxtb	r2, r3
 8000330:	2300      	movs	r3, #0
 8000332:	f7ff ffa3 	bl	800027c <set_byte_on_matrix>
		for(int j = 0; j<8; j++){
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b07      	cmp	r3, #7
 8000340:	dde9      	ble.n	8000316 <display_screen_buffer+0x12>
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b03      	cmp	r3, #3
 800034c:	dde0      	ble.n	8000310 <display_screen_buffer+0xc>
		}
	}
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000dc 	.word	0x200000dc

0800035c <shift_screen_buffer_left>:
								  	  | (screen_buffer[k-1][j] & 0x1) << 7;
		}
	}
}

void shift_screen_buffer_left(){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
	for(int k = 0; k<NUMBER_OF_CELLS; k++){
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	e02a      	b.n	80003be <shift_screen_buffer_left+0x62>
		for(int j = 0; j<8; j++){
 8000368:	2300      	movs	r3, #0
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	e021      	b.n	80003b2 <shift_screen_buffer_left+0x56>
			screen_buffer[k][j] = screen_buffer[k][j] << 1
 800036e:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <shift_screen_buffer_left+0x74>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	441a      	add	r2, r3
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	4413      	add	r3, r2
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	005b      	lsls	r3, r3, #1
								  	  | (screen_buffer[k+1][j] & 0x80) >> 7;
 800037e:	b25a      	sxtb	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	4912      	ldr	r1, [pc, #72]	; (80003d0 <shift_screen_buffer_left+0x74>)
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	4419      	add	r1, r3
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	440b      	add	r3, r1
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	09db      	lsrs	r3, r3, #7
 8000392:	b2db      	uxtb	r3, r3
 8000394:	b25b      	sxtb	r3, r3
 8000396:	4313      	orrs	r3, r2
 8000398:	b25b      	sxtb	r3, r3
 800039a:	b2d9      	uxtb	r1, r3
			screen_buffer[k][j] = screen_buffer[k][j] << 1
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <shift_screen_buffer_left+0x74>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	441a      	add	r2, r3
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	460a      	mov	r2, r1
 80003aa:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<8; j++){
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	ddda      	ble.n	800036e <shift_screen_buffer_left+0x12>
	for(int k = 0; k<NUMBER_OF_CELLS; k++){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	ddd1      	ble.n	8000368 <shift_screen_buffer_left+0xc>
		}
	}
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	200000dc 	.word	0x200000dc

080003d4 <scroll_text_left>:
		}
	}
}


void scroll_text_left(char* mytext, uint16_t speed, uint8_t blank_space){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	460b      	mov	r3, r1
 80003de:	807b      	strh	r3, [r7, #2]
 80003e0:	4613      	mov	r3, r2
 80003e2:	707b      	strb	r3, [r7, #1]
	for(int k = 0; k<strlen(mytext); k++){
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	e041      	b.n	800046e <scroll_text_left+0x9a>
		//mivel visszafele nezzuk
		for(int j = 7; j>=0; j--){
 80003ea:	2307      	movs	r3, #7
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	e038      	b.n	8000462 <scroll_text_left+0x8e>
			shift_screen_buffer_left();
 80003f0:	f7ff ffb4 	bl	800035c <shift_screen_buffer_left>
			for(int i = 0; i<8; i++){
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	e027      	b.n	800044a <scroll_text_left+0x76>
				// n k-adik bitje: (n & ( 1 << k )) >> k
				screen_buffer[3][i] =
				    screen_buffer[3][i]
 80003fa:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <scroll_text_left+0xd4>)
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	4413      	add	r3, r2
 8000400:	3318      	adds	r3, #24
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b25a      	sxtb	r2, r3
					    | (numbers[mytext[k]-0x30][i] & ( 1 << j )) >> j;
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	440b      	add	r3, r1
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	3b30      	subs	r3, #48	; 0x30
 8000410:	4926      	ldr	r1, [pc, #152]	; (80004ac <scroll_text_left+0xd8>)
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	4419      	add	r1, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	440b      	add	r3, r1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	2101      	movs	r1, #1
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	ea00 0103 	and.w	r1, r0, r3
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	fa41 f303 	asr.w	r3, r1, r3
 8000430:	b25b      	sxtb	r3, r3
 8000432:	4313      	orrs	r3, r2
 8000434:	b25b      	sxtb	r3, r3
 8000436:	b2d9      	uxtb	r1, r3
				screen_buffer[3][i] =
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <scroll_text_left+0xd4>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	4413      	add	r3, r2
 800043e:	3318      	adds	r3, #24
 8000440:	460a      	mov	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++){
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b07      	cmp	r3, #7
 800044e:	ddd4      	ble.n	80003fa <scroll_text_left+0x26>
			}
			display_screen_buffer();
 8000450:	f7ff ff58 	bl	8000304 <display_screen_buffer>
			HAL_Delay(speed);
 8000454:	887b      	ldrh	r3, [r7, #2]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fa0c 	bl	8000874 <HAL_Delay>
		for(int j = 7; j>=0; j--){
 800045c:	693b      	ldr	r3, [r7, #16]
 800045e:	3b01      	subs	r3, #1
 8000460:	613b      	str	r3, [r7, #16]
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	2b00      	cmp	r3, #0
 8000466:	dac3      	bge.n	80003f0 <scroll_text_left+0x1c>
	for(int k = 0; k<strlen(mytext); k++){
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3301      	adds	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff fe6c 	bl	800014c <strlen>
 8000474:	4602      	mov	r2, r0
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	429a      	cmp	r2, r3
 800047a:	d8b6      	bhi.n	80003ea <scroll_text_left+0x16>
		}
	}
	//making blank space after the text
	for(int i = 0; i<blank_space; i++){
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	e00a      	b.n	8000498 <scroll_text_left+0xc4>
		shift_screen_buffer_left();
 8000482:	f7ff ff6b 	bl	800035c <shift_screen_buffer_left>
		display_screen_buffer();
 8000486:	f7ff ff3d 	bl	8000304 <display_screen_buffer>
		HAL_Delay(speed);
 800048a:	887b      	ldrh	r3, [r7, #2]
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f9f1 	bl	8000874 <HAL_Delay>
	for(int i = 0; i<blank_space; i++){
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	3301      	adds	r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	787b      	ldrb	r3, [r7, #1]
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	dbf0      	blt.n	8000482 <scroll_text_left+0xae>
	}
}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200000dc 	.word	0x200000dc
 80004ac:	20000000 	.word	0x20000000

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval intsrand(time(NULL));   // Initialization, should only be called once.
  */
int main(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b095      	sub	sp, #84	; 0x54
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 f97b 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f831 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f875 	bl	80005ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  max_init(0x01);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff feba 	bl	800023c <max_init>

  srand(time(NULL));
 80004c8:	2000      	movs	r0, #0
 80004ca:	f001 f8df 	bl	800168c <time>
 80004ce:	4603      	mov	r3, r0
 80004d0:	460c      	mov	r4, r1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 f862 	bl	800159c <srand>

  char text_buffer[80] = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2250      	movs	r2, #80	; 0x50
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f854 	bl	800158c <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(text_buffer, "%d", rand() % 100);
 80004e4:	f001 f87e 	bl	80015e4 <rand>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <main+0x68>)
 80004ec:	fb83 1302 	smull	r1, r3, r3, r2
 80004f0:	1159      	asrs	r1, r3, #5
 80004f2:	17d3      	asrs	r3, r2, #31
 80004f4:	1acb      	subs	r3, r1, r3
 80004f6:	2164      	movs	r1, #100	; 0x64
 80004f8:	fb01 f303 	mul.w	r3, r1, r3
 80004fc:	1ad3      	subs	r3, r2, r3
 80004fe:	4638      	mov	r0, r7
 8000500:	461a      	mov	r2, r3
 8000502:	4906      	ldr	r1, [pc, #24]	; (800051c <main+0x6c>)
 8000504:	f001 f8a2 	bl	800164c <siprintf>
	  scroll_text_left(text_buffer, 40, 6);
 8000508:	463b      	mov	r3, r7
 800050a:	2206      	movs	r2, #6
 800050c:	2128      	movs	r1, #40	; 0x28
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff60 	bl	80003d4 <scroll_text_left>
	  sprintf(text_buffer, "%d", rand() % 100);
 8000514:	e7e6      	b.n	80004e4 <main+0x34>
 8000516:	bf00      	nop
 8000518:	51eb851f 	.word	0x51eb851f
 800051c:	08001f00 	.word	0x08001f00

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	; 0x40
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	2228      	movs	r2, #40	; 0x28
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f82c 	bl	800158c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000554:	2302      	movs	r3, #2
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fbfb 	bl	8000d64 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000574:	f000 f858 	bl	8000628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fe66 	bl	8001264 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 f843 	bl	8000628 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3740      	adds	r7, #64	; 0x40
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_GPIO_Init+0x74>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a16      	ldr	r2, [pc, #88]	; (8000620 <MX_GPIO_Init+0x74>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_GPIO_Init+0x74>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_GPIO_Init+0x74>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <MX_GPIO_Init+0x74>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_GPIO_Init+0x74>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clock_Pin|cs_Pin|data_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	21e0      	movs	r1, #224	; 0xe0
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0x78>)
 80005f6:	f000 fb9d 	bl	8000d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : clock_Pin cs_Pin data_Pin */
  GPIO_InitStruct.Pin = clock_Pin|cs_Pin|data_Pin;
 80005fa:	23e0      	movs	r3, #224	; 0xe0
 80005fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	4619      	mov	r1, r3
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0x78>)
 8000612:	f000 fa35 	bl	8000a80 <HAL_GPIO_Init>

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <HardFault_Handler+0x4>

080006aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <MemManage_Handler+0x4>

080006b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <BusFault_Handler+0x4>

080006b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f8aa 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_sbrk+0x5c>)
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_sbrk+0x60>)
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <_sbrk+0x64>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <_sbrk+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	429a      	cmp	r2, r3
 800071a:	d207      	bcs.n	800072c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800071c:	f000 ff0c 	bl	8001538 <__errno>
 8000720:	4602      	mov	r2, r0
 8000722:	230c      	movs	r3, #12
 8000724:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072a:	e009      	b.n	8000740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <_sbrk+0x64>)
 800073c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20005000 	.word	0x20005000
 800074c:	00000400 	.word	0x00000400
 8000750:	200000fc 	.word	0x200000fc
 8000754:	20000110 	.word	0x20000110

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000764:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000766:	e003      	b.n	8000770 <LoopCopyDataInit>

08000768 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800076a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800076c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800076e:	3104      	adds	r1, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000774:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000778:	d3f6      	bcc.n	8000768 <CopyDataInit>
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800077c:	e002      	b.n	8000784 <LoopFillZerobss>

0800077e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000780:	f842 3b04 	str.w	r3, [r2], #4

08000784 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000788:	d3f9      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f7ff ffe5 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f000 fed9 	bl	8001544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fe8d 	bl	80004b0 <main>
  bx lr
 8000796:	4770      	bx	lr
  ldr r3, =_sidata
 8000798:	08001f64 	.word	0x08001f64
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007a0:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 80007a4:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 80007a8:	20000110 	.word	0x20000110

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f929 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff ff32 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f933 	bl	8000a66 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	f000 f909 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000050 	.word	0x20000050
 8000834:	20000058 	.word	0x20000058
 8000838:	20000054 	.word	0x20000054

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20000058 	.word	0x20000058
 800085c:	20000108 	.word	0x20000108

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000108 	.word	0x20000108

08000874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff fff0 	bl	8000860 <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_Delay+0x40>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffe0 	bl	8000860 <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000058 	.word	0x20000058

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f8:	f7ff ff90 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff49 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff5e 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff90 	bl	8000970 <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5f 	bl	800091c <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ffb0 	bl	80009d4 <SysTick_Config>
 8000a74:	4603      	mov	r3, r0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b08b      	sub	sp, #44	; 0x2c
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	e127      	b.n	8000ce4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a94:	2201      	movs	r2, #1
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	69fa      	ldr	r2, [r7, #28]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f040 8116 	bne.w	8000cde <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d034      	beq.n	8000b24 <HAL_GPIO_Init+0xa4>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d80d      	bhi.n	8000ada <HAL_GPIO_Init+0x5a>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d02b      	beq.n	8000b1a <HAL_GPIO_Init+0x9a>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d804      	bhi.n	8000ad0 <HAL_GPIO_Init+0x50>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d031      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d01c      	beq.n	8000b08 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ace:	e048      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d043      	beq.n	8000b5c <HAL_GPIO_Init+0xdc>
 8000ad4:	2b11      	cmp	r3, #17
 8000ad6:	d01b      	beq.n	8000b10 <HAL_GPIO_Init+0x90>
          break;
 8000ad8:	e043      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ada:	4a89      	ldr	r2, [pc, #548]	; (8000d00 <HAL_GPIO_Init+0x280>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d026      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
 8000ae0:	4a87      	ldr	r2, [pc, #540]	; (8000d00 <HAL_GPIO_Init+0x280>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d806      	bhi.n	8000af4 <HAL_GPIO_Init+0x74>
 8000ae6:	4a87      	ldr	r2, [pc, #540]	; (8000d04 <HAL_GPIO_Init+0x284>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d020      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
 8000aec:	4a86      	ldr	r2, [pc, #536]	; (8000d08 <HAL_GPIO_Init+0x288>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d01d      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
          break;
 8000af2:	e036      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000af4:	4a85      	ldr	r2, [pc, #532]	; (8000d0c <HAL_GPIO_Init+0x28c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d019      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
 8000afa:	4a85      	ldr	r2, [pc, #532]	; (8000d10 <HAL_GPIO_Init+0x290>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d016      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
 8000b00:	4a84      	ldr	r2, [pc, #528]	; (8000d14 <HAL_GPIO_Init+0x294>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d013      	beq.n	8000b2e <HAL_GPIO_Init+0xae>
          break;
 8000b06:	e02c      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e028      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	3304      	adds	r3, #4
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e023      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	3308      	adds	r3, #8
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e01e      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e019      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e012      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d105      	bne.n	8000b50 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	611a      	str	r2, [r3, #16]
          break;
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b50:	2308      	movs	r3, #8
 8000b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	615a      	str	r2, [r3, #20]
          break;
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d801      	bhi.n	8000b6c <HAL_GPIO_Init+0xec>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	e001      	b.n	8000b70 <HAL_GPIO_Init+0xf0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3304      	adds	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2bff      	cmp	r3, #255	; 0xff
 8000b76:	d802      	bhi.n	8000b7e <HAL_GPIO_Init+0xfe>
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x104>
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	3b08      	subs	r3, #8
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	401a      	ands	r2, r3
 8000b96:	6a39      	ldr	r1, [r7, #32]
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8096 	beq.w	8000cde <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb2:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <HAL_GPIO_Init+0x298>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a58      	ldr	r2, [pc, #352]	; (8000d18 <HAL_GPIO_Init+0x298>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b56      	ldr	r3, [pc, #344]	; (8000d18 <HAL_GPIO_Init+0x298>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bca:	4a54      	ldr	r2, [pc, #336]	; (8000d1c <HAL_GPIO_Init+0x29c>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	220f      	movs	r2, #15
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4013      	ands	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4b      	ldr	r2, [pc, #300]	; (8000d20 <HAL_GPIO_Init+0x2a0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0x19e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4a      	ldr	r2, [pc, #296]	; (8000d24 <HAL_GPIO_Init+0x2a4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d00d      	beq.n	8000c1a <HAL_GPIO_Init+0x19a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a49      	ldr	r2, [pc, #292]	; (8000d28 <HAL_GPIO_Init+0x2a8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d007      	beq.n	8000c16 <HAL_GPIO_Init+0x196>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_GPIO_Init+0x2ac>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_GPIO_Init+0x192>
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x1a0>
 8000c12:	2304      	movs	r3, #4
 8000c14:	e004      	b.n	8000c20 <HAL_GPIO_Init+0x1a0>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_Init+0x1a0>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x1a0>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c22:	f002 0203 	and.w	r2, r2, #3
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	4093      	lsls	r3, r2
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c30:	493a      	ldr	r1, [pc, #232]	; (8000d1c <HAL_GPIO_Init+0x29c>)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4938      	ldr	r1, [pc, #224]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4933      	ldr	r1, [pc, #204]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	492e      	ldr	r1, [pc, #184]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	4929      	ldr	r1, [pc, #164]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4924      	ldr	r1, [pc, #144]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	608b      	str	r3, [r1, #8]
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	491f      	ldr	r1, [pc, #124]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cc2:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	491a      	ldr	r1, [pc, #104]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60cb      	str	r3, [r1, #12]
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4915      	ldr	r1, [pc, #84]	; (8000d30 <HAL_GPIO_Init+0x2b0>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	fa22 f303 	lsr.w	r3, r2, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f47f aed0 	bne.w	8000a94 <HAL_GPIO_Init+0x14>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	372c      	adds	r7, #44	; 0x2c
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	10120000 	.word	0x10120000
 8000d0c:	10310000 	.word	0x10310000
 8000d10:	10320000 	.word	0x10320000
 8000d14:	10220000 	.word	0x10220000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
 8000d40:	4613      	mov	r3, r2
 8000d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d44:	787b      	ldrb	r3, [r7, #1]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d50:	e003      	b.n	8000d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	041a      	lsls	r2, r3, #16
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e26c      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8087 	beq.w	8000e92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d84:	4b92      	ldr	r3, [pc, #584]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d00c      	beq.n	8000daa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d90:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d112      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x5e>
 8000d9c:	4b8c      	ldr	r3, [pc, #560]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d10b      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d06c      	beq.n	8000e90 <HAL_RCC_OscConfig+0x12c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d168      	bne.n	8000e90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e246      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dca:	d106      	bne.n	8000dda <HAL_RCC_OscConfig+0x76>
 8000dcc:	4b80      	ldr	r3, [pc, #512]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a7f      	ldr	r2, [pc, #508]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e02e      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x98>
 8000de2:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a7a      	ldr	r2, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a77      	ldr	r2, [pc, #476]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e01d      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0xbc>
 8000e06:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a71      	ldr	r2, [pc, #452]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a6e      	ldr	r2, [pc, #440]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e00b      	b.n	8000e38 <HAL_RCC_OscConfig+0xd4>
 8000e20:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a6a      	ldr	r2, [pc, #424]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b68      	ldr	r3, [pc, #416]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a67      	ldr	r2, [pc, #412]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d013      	beq.n	8000e68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fd0e 	bl	8000860 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fd0a 	bl	8000860 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e1fa      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0xe4>
 8000e66:	e014      	b.n	8000e92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fcfa 	bl	8000860 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fcf6 	bl	8000860 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1e6      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x10c>
 8000e8e:	e000      	b.n	8000e92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d063      	beq.n	8000f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00b      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eaa:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d11c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x18c>
 8000eb6:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d116      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d005      	beq.n	8000eda <HAL_RCC_OscConfig+0x176>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d001      	beq.n	8000eda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e1ba      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4939      	ldr	r1, [pc, #228]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	e03a      	b.n	8000f66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d020      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <HAL_RCC_OscConfig+0x270>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fcaf 	bl	8000860 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f06:	f7ff fcab 	bl	8000860 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e19b      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
 8000f38:	e015      	b.n	8000f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fc8e 	bl	8000860 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f48:	f7ff fc8a 	bl	8000860 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e17a      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03a      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d019      	beq.n	8000fae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_RCC_OscConfig+0x274>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fc6e 	bl	8000860 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fc6a 	bl	8000860 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e15a      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f0      	beq.n	8000f88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 faa8 	bl	80014fc <RCC_Delay>
 8000fac:	e01c      	b.n	8000fe8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_RCC_OscConfig+0x274>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc54 	bl	8000860 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fba:	e00f      	b.n	8000fdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc50 	bl	8000860 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d908      	bls.n	8000fdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e140      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	42420000 	.word	0x42420000
 8000fd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fdc:	4b9e      	ldr	r3, [pc, #632]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e9      	bne.n	8000fbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a6 	beq.w	8001142 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffa:	4b97      	ldr	r3, [pc, #604]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10d      	bne.n	8001022 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b94      	ldr	r3, [pc, #592]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a93      	ldr	r2, [pc, #588]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b91      	ldr	r3, [pc, #580]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001022:	4b8e      	ldr	r3, [pc, #568]	; (800125c <HAL_RCC_OscConfig+0x4f8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d118      	bne.n	8001060 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102e:	4b8b      	ldr	r3, [pc, #556]	; (800125c <HAL_RCC_OscConfig+0x4f8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a8a      	ldr	r2, [pc, #552]	; (800125c <HAL_RCC_OscConfig+0x4f8>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103a:	f7ff fc11 	bl	8000860 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001042:	f7ff fc0d 	bl	8000860 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e0fd      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	4b81      	ldr	r3, [pc, #516]	; (800125c <HAL_RCC_OscConfig+0x4f8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x312>
 8001068:	4b7b      	ldr	r3, [pc, #492]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a7a      	ldr	r2, [pc, #488]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6213      	str	r3, [r2, #32]
 8001074:	e02d      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10c      	bne.n	8001098 <HAL_RCC_OscConfig+0x334>
 800107e:	4b76      	ldr	r3, [pc, #472]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a75      	ldr	r2, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	4b73      	ldr	r3, [pc, #460]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a72      	ldr	r2, [pc, #456]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	e01c      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d10c      	bne.n	80010ba <HAL_RCC_OscConfig+0x356>
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a6c      	ldr	r2, [pc, #432]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a69      	ldr	r2, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	e00b      	b.n	80010d2 <HAL_RCC_OscConfig+0x36e>
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a66      	ldr	r2, [pc, #408]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a63      	ldr	r2, [pc, #396]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d015      	beq.n	8001106 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fbc1 	bl	8000860 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff fbbd 	bl	8000860 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e0ab      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0ee      	beq.n	80010e2 <HAL_RCC_OscConfig+0x37e>
 8001104:	e014      	b.n	8001130 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fbab 	bl	8000860 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff fba7 	bl	8000860 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	; 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e095      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ee      	bne.n	800110e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d105      	bne.n	8001142 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a47      	ldr	r2, [pc, #284]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8081 	beq.w	800124e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b08      	cmp	r3, #8
 8001156:	d061      	beq.n	800121c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d146      	bne.n	80011ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_RCC_OscConfig+0x4fc>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fb7b 	bl	8000860 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116e:	f7ff fb77 	bl	8000860 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e067      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d108      	bne.n	80011a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	492d      	ldr	r1, [pc, #180]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a19      	ldr	r1, [r3, #32]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	430b      	orrs	r3, r1
 80011ba:	4927      	ldr	r1, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_RCC_OscConfig+0x4fc>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fb4b 	bl	8000860 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fb47 	bl	8000860 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e037      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x46a>
 80011ec:	e02f      	b.n	800124e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_RCC_OscConfig+0x4fc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb34 	bl	8000860 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb30 	bl	8000860 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e020      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x498>
 800121a:	e018      	b.n	800124e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e013      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	42420060 	.word	0x42420060

08001264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0d0      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d910      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 0207 	bic.w	r2, r3, #7
 800128e:	4965      	ldr	r1, [pc, #404]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b8      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	494d      	ldr	r1, [pc, #308]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d040      	beq.n	8001384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e07f      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e073      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e06b      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f023 0203 	bic.w	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4936      	ldr	r1, [pc, #216]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001354:	f7ff fa84 	bl	8000860 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	e00a      	b.n	8001372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7ff fa80 	bl	8000860 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e053      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 020c 	and.w	r2, r3, #12
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	429a      	cmp	r2, r3
 8001382:	d1eb      	bne.n	800135c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d210      	bcs.n	80013b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 0207 	bic.w	r2, r3, #7
 800139a:	4922      	ldr	r1, [pc, #136]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e032      	b.n	800141a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013f2:	f000 f821 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80013f6:	4601      	mov	r1, r0
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_RCC_ClockConfig+0x1c8>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	fa21 f303 	lsr.w	r3, r1, r3
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x1cc>)
 800140c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1d0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f9e2 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40022000 	.word	0x40022000
 8001428:	40021000 	.word	0x40021000
 800142c:	08001f18 	.word	0x08001f18
 8001430:	20000050 	.word	0x20000050
 8001434:	20000054 	.word	0x20000054

08001438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001438:	b490      	push	{r4, r7}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001440:	1d3c      	adds	r4, r7, #4
 8001442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b04      	cmp	r3, #4
 8001470:	d002      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x40>
 8001472:	2b08      	cmp	r3, #8
 8001474:	d003      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0x46>
 8001476:	e02d      	b.n	80014d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800147a:	623b      	str	r3, [r7, #32]
      break;
 800147c:	e02d      	b.n	80014da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800148a:	4413      	add	r3, r2
 800148c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001490:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	0c5b      	lsrs	r3, r3, #17
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014aa:	4413      	add	r3, r2
 80014ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b6:	fb02 f203 	mul.w	r2, r2, r3
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	e004      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	623b      	str	r3, [r7, #32]
      break;
 80014d2:	e002      	b.n	80014da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d6:	623b      	str	r3, [r7, #32]
      break;
 80014d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014da:	6a3b      	ldr	r3, [r7, #32]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc90      	pop	{r4, r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	08001f04 	.word	0x08001f04
 80014ec:	08001f14 	.word	0x08001f14
 80014f0:	40021000 	.word	0x40021000
 80014f4:	007a1200 	.word	0x007a1200
 80014f8:	003d0900 	.word	0x003d0900

080014fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <RCC_Delay+0x34>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <RCC_Delay+0x38>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0a5b      	lsrs	r3, r3, #9
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001518:	bf00      	nop
  }
  while (Delay --);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	60fa      	str	r2, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f9      	bne.n	8001518 <RCC_Delay+0x1c>
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000050 	.word	0x20000050
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <__errno>:
 8001538:	4b01      	ldr	r3, [pc, #4]	; (8001540 <__errno+0x8>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000005c 	.word	0x2000005c

08001544 <__libc_init_array>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	2500      	movs	r5, #0
 8001548:	4e0c      	ldr	r6, [pc, #48]	; (800157c <__libc_init_array+0x38>)
 800154a:	4c0d      	ldr	r4, [pc, #52]	; (8001580 <__libc_init_array+0x3c>)
 800154c:	1ba4      	subs	r4, r4, r6
 800154e:	10a4      	asrs	r4, r4, #2
 8001550:	42a5      	cmp	r5, r4
 8001552:	d109      	bne.n	8001568 <__libc_init_array+0x24>
 8001554:	f000 fcc8 	bl	8001ee8 <_init>
 8001558:	2500      	movs	r5, #0
 800155a:	4e0a      	ldr	r6, [pc, #40]	; (8001584 <__libc_init_array+0x40>)
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <__libc_init_array+0x44>)
 800155e:	1ba4      	subs	r4, r4, r6
 8001560:	10a4      	asrs	r4, r4, #2
 8001562:	42a5      	cmp	r5, r4
 8001564:	d105      	bne.n	8001572 <__libc_init_array+0x2e>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800156c:	4798      	blx	r3
 800156e:	3501      	adds	r5, #1
 8001570:	e7ee      	b.n	8001550 <__libc_init_array+0xc>
 8001572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001576:	4798      	blx	r3
 8001578:	3501      	adds	r5, #1
 800157a:	e7f2      	b.n	8001562 <__libc_init_array+0x1e>
 800157c:	08001f5c 	.word	0x08001f5c
 8001580:	08001f5c 	.word	0x08001f5c
 8001584:	08001f5c 	.word	0x08001f5c
 8001588:	08001f60 	.word	0x08001f60

0800158c <memset>:
 800158c:	4603      	mov	r3, r0
 800158e:	4402      	add	r2, r0
 8001590:	4293      	cmp	r3, r2
 8001592:	d100      	bne.n	8001596 <memset+0xa>
 8001594:	4770      	bx	lr
 8001596:	f803 1b01 	strb.w	r1, [r3], #1
 800159a:	e7f9      	b.n	8001590 <memset+0x4>

0800159c <srand>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <srand+0x38>)
 80015a0:	4605      	mov	r5, r0
 80015a2:	681c      	ldr	r4, [r3, #0]
 80015a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015a6:	b97b      	cbnz	r3, 80015c8 <srand+0x2c>
 80015a8:	2018      	movs	r0, #24
 80015aa:	f000 f89b 	bl	80016e4 <malloc>
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <srand+0x3c>)
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <srand+0x40>)
 80015b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80015b4:	e9c0 2300 	strd	r2, r3, [r0]
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <srand+0x44>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	6083      	str	r3, [r0, #8]
 80015be:	230b      	movs	r3, #11
 80015c0:	8183      	strh	r3, [r0, #12]
 80015c2:	2300      	movs	r3, #0
 80015c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80015c8:	2200      	movs	r2, #0
 80015ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015cc:	611d      	str	r5, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	bd38      	pop	{r3, r4, r5, pc}
 80015d2:	bf00      	nop
 80015d4:	2000005c 	.word	0x2000005c
 80015d8:	abcd330e 	.word	0xabcd330e
 80015dc:	e66d1234 	.word	0xe66d1234
 80015e0:	0005deec 	.word	0x0005deec

080015e4 <rand>:
 80015e4:	b538      	push	{r3, r4, r5, lr}
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <rand+0x50>)
 80015e8:	681c      	ldr	r4, [r3, #0]
 80015ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015ec:	b97b      	cbnz	r3, 800160e <rand+0x2a>
 80015ee:	2018      	movs	r0, #24
 80015f0:	f000 f878 	bl	80016e4 <malloc>
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <rand+0x54>)
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <rand+0x58>)
 80015f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80015fa:	e9c0 2300 	strd	r2, r3, [r0]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <rand+0x5c>)
 8001600:	2201      	movs	r2, #1
 8001602:	6083      	str	r3, [r0, #8]
 8001604:	230b      	movs	r3, #11
 8001606:	8183      	strh	r3, [r0, #12]
 8001608:	2300      	movs	r3, #0
 800160a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800160e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <rand+0x60>)
 8001612:	690a      	ldr	r2, [r1, #16]
 8001614:	694b      	ldr	r3, [r1, #20]
 8001616:	4350      	muls	r0, r2
 8001618:	4c0b      	ldr	r4, [pc, #44]	; (8001648 <rand+0x64>)
 800161a:	fb04 0003 	mla	r0, r4, r3, r0
 800161e:	fba2 2304 	umull	r2, r3, r2, r4
 8001622:	4403      	add	r3, r0
 8001624:	1c54      	adds	r4, r2, #1
 8001626:	f143 0500 	adc.w	r5, r3, #0
 800162a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800162e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	2000005c 	.word	0x2000005c
 8001638:	abcd330e 	.word	0xabcd330e
 800163c:	e66d1234 	.word	0xe66d1234
 8001640:	0005deec 	.word	0x0005deec
 8001644:	5851f42d 	.word	0x5851f42d
 8001648:	4c957f2d 	.word	0x4c957f2d

0800164c <siprintf>:
 800164c:	b40e      	push	{r1, r2, r3}
 800164e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001652:	b500      	push	{lr}
 8001654:	b09c      	sub	sp, #112	; 0x70
 8001656:	ab1d      	add	r3, sp, #116	; 0x74
 8001658:	9002      	str	r0, [sp, #8]
 800165a:	9006      	str	r0, [sp, #24]
 800165c:	9107      	str	r1, [sp, #28]
 800165e:	9104      	str	r1, [sp, #16]
 8001660:	4808      	ldr	r0, [pc, #32]	; (8001684 <siprintf+0x38>)
 8001662:	4909      	ldr	r1, [pc, #36]	; (8001688 <siprintf+0x3c>)
 8001664:	f853 2b04 	ldr.w	r2, [r3], #4
 8001668:	9105      	str	r1, [sp, #20]
 800166a:	6800      	ldr	r0, [r0, #0]
 800166c:	a902      	add	r1, sp, #8
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f000 f940 	bl	80018f4 <_svfiprintf_r>
 8001674:	2200      	movs	r2, #0
 8001676:	9b02      	ldr	r3, [sp, #8]
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	b01c      	add	sp, #112	; 0x70
 800167c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001680:	b003      	add	sp, #12
 8001682:	4770      	bx	lr
 8001684:	2000005c 	.word	0x2000005c
 8001688:	ffff0208 	.word	0xffff0208

0800168c <time>:
 800168c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <time+0x30>)
 8001690:	4604      	mov	r4, r0
 8001692:	2200      	movs	r2, #0
 8001694:	4669      	mov	r1, sp
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	f000 f812 	bl	80016c0 <_gettimeofday_r>
 800169c:	2800      	cmp	r0, #0
 800169e:	da05      	bge.n	80016ac <time+0x20>
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a8:	e9cd 2300 	strd	r2, r3, [sp]
 80016ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80016b0:	b10c      	cbz	r4, 80016b6 <time+0x2a>
 80016b2:	e9c4 0100 	strd	r0, r1, [r4]
 80016b6:	b004      	add	sp, #16
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	bf00      	nop
 80016bc:	2000005c 	.word	0x2000005c

080016c0 <_gettimeofday_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	2300      	movs	r3, #0
 80016c4:	4c06      	ldr	r4, [pc, #24]	; (80016e0 <_gettimeofday_r+0x20>)
 80016c6:	4605      	mov	r5, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	f000 fc03 	bl	8001ed8 <_gettimeofday>
 80016d2:	1c43      	adds	r3, r0, #1
 80016d4:	d102      	bne.n	80016dc <_gettimeofday_r+0x1c>
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	b103      	cbz	r3, 80016dc <_gettimeofday_r+0x1c>
 80016da:	602b      	str	r3, [r5, #0]
 80016dc:	bd38      	pop	{r3, r4, r5, pc}
 80016de:	bf00      	nop
 80016e0:	2000010c 	.word	0x2000010c

080016e4 <malloc>:
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <malloc+0xc>)
 80016e6:	4601      	mov	r1, r0
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f000 b84f 	b.w	800178c <_malloc_r>
 80016ee:	bf00      	nop
 80016f0:	2000005c 	.word	0x2000005c

080016f4 <_free_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4605      	mov	r5, r0
 80016f8:	2900      	cmp	r1, #0
 80016fa:	d043      	beq.n	8001784 <_free_r+0x90>
 80016fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001700:	1f0c      	subs	r4, r1, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	bfb8      	it	lt
 8001706:	18e4      	addlt	r4, r4, r3
 8001708:	f000 fbb6 	bl	8001e78 <__malloc_lock>
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <_free_r+0x94>)
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	4610      	mov	r0, r2
 8001712:	b933      	cbnz	r3, 8001722 <_free_r+0x2e>
 8001714:	6063      	str	r3, [r4, #4]
 8001716:	6014      	str	r4, [r2, #0]
 8001718:	4628      	mov	r0, r5
 800171a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800171e:	f000 bbac 	b.w	8001e7a <__malloc_unlock>
 8001722:	42a3      	cmp	r3, r4
 8001724:	d90b      	bls.n	800173e <_free_r+0x4a>
 8001726:	6821      	ldr	r1, [r4, #0]
 8001728:	1862      	adds	r2, r4, r1
 800172a:	4293      	cmp	r3, r2
 800172c:	bf01      	itttt	eq
 800172e:	681a      	ldreq	r2, [r3, #0]
 8001730:	685b      	ldreq	r3, [r3, #4]
 8001732:	1852      	addeq	r2, r2, r1
 8001734:	6022      	streq	r2, [r4, #0]
 8001736:	6063      	str	r3, [r4, #4]
 8001738:	6004      	str	r4, [r0, #0]
 800173a:	e7ed      	b.n	8001718 <_free_r+0x24>
 800173c:	4613      	mov	r3, r2
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	b10a      	cbz	r2, 8001746 <_free_r+0x52>
 8001742:	42a2      	cmp	r2, r4
 8001744:	d9fa      	bls.n	800173c <_free_r+0x48>
 8001746:	6819      	ldr	r1, [r3, #0]
 8001748:	1858      	adds	r0, r3, r1
 800174a:	42a0      	cmp	r0, r4
 800174c:	d10b      	bne.n	8001766 <_free_r+0x72>
 800174e:	6820      	ldr	r0, [r4, #0]
 8001750:	4401      	add	r1, r0
 8001752:	1858      	adds	r0, r3, r1
 8001754:	4282      	cmp	r2, r0
 8001756:	6019      	str	r1, [r3, #0]
 8001758:	d1de      	bne.n	8001718 <_free_r+0x24>
 800175a:	6810      	ldr	r0, [r2, #0]
 800175c:	6852      	ldr	r2, [r2, #4]
 800175e:	4401      	add	r1, r0
 8001760:	6019      	str	r1, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	e7d8      	b.n	8001718 <_free_r+0x24>
 8001766:	d902      	bls.n	800176e <_free_r+0x7a>
 8001768:	230c      	movs	r3, #12
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	e7d4      	b.n	8001718 <_free_r+0x24>
 800176e:	6820      	ldr	r0, [r4, #0]
 8001770:	1821      	adds	r1, r4, r0
 8001772:	428a      	cmp	r2, r1
 8001774:	bf01      	itttt	eq
 8001776:	6811      	ldreq	r1, [r2, #0]
 8001778:	6852      	ldreq	r2, [r2, #4]
 800177a:	1809      	addeq	r1, r1, r0
 800177c:	6021      	streq	r1, [r4, #0]
 800177e:	6062      	str	r2, [r4, #4]
 8001780:	605c      	str	r4, [r3, #4]
 8001782:	e7c9      	b.n	8001718 <_free_r+0x24>
 8001784:	bd38      	pop	{r3, r4, r5, pc}
 8001786:	bf00      	nop
 8001788:	20000100 	.word	0x20000100

0800178c <_malloc_r>:
 800178c:	b570      	push	{r4, r5, r6, lr}
 800178e:	1ccd      	adds	r5, r1, #3
 8001790:	f025 0503 	bic.w	r5, r5, #3
 8001794:	3508      	adds	r5, #8
 8001796:	2d0c      	cmp	r5, #12
 8001798:	bf38      	it	cc
 800179a:	250c      	movcc	r5, #12
 800179c:	2d00      	cmp	r5, #0
 800179e:	4606      	mov	r6, r0
 80017a0:	db01      	blt.n	80017a6 <_malloc_r+0x1a>
 80017a2:	42a9      	cmp	r1, r5
 80017a4:	d903      	bls.n	80017ae <_malloc_r+0x22>
 80017a6:	230c      	movs	r3, #12
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
 80017ae:	f000 fb63 	bl	8001e78 <__malloc_lock>
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <_malloc_r+0xac>)
 80017b4:	6814      	ldr	r4, [r2, #0]
 80017b6:	4621      	mov	r1, r4
 80017b8:	b991      	cbnz	r1, 80017e0 <_malloc_r+0x54>
 80017ba:	4c20      	ldr	r4, [pc, #128]	; (800183c <_malloc_r+0xb0>)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	b91b      	cbnz	r3, 80017c8 <_malloc_r+0x3c>
 80017c0:	4630      	mov	r0, r6
 80017c2:	f000 fb17 	bl	8001df4 <_sbrk_r>
 80017c6:	6020      	str	r0, [r4, #0]
 80017c8:	4629      	mov	r1, r5
 80017ca:	4630      	mov	r0, r6
 80017cc:	f000 fb12 	bl	8001df4 <_sbrk_r>
 80017d0:	1c43      	adds	r3, r0, #1
 80017d2:	d124      	bne.n	800181e <_malloc_r+0x92>
 80017d4:	230c      	movs	r3, #12
 80017d6:	4630      	mov	r0, r6
 80017d8:	6033      	str	r3, [r6, #0]
 80017da:	f000 fb4e 	bl	8001e7a <__malloc_unlock>
 80017de:	e7e4      	b.n	80017aa <_malloc_r+0x1e>
 80017e0:	680b      	ldr	r3, [r1, #0]
 80017e2:	1b5b      	subs	r3, r3, r5
 80017e4:	d418      	bmi.n	8001818 <_malloc_r+0x8c>
 80017e6:	2b0b      	cmp	r3, #11
 80017e8:	d90f      	bls.n	800180a <_malloc_r+0x7e>
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	18cc      	adds	r4, r1, r3
 80017ee:	50cd      	str	r5, [r1, r3]
 80017f0:	4630      	mov	r0, r6
 80017f2:	f000 fb42 	bl	8001e7a <__malloc_unlock>
 80017f6:	f104 000b 	add.w	r0, r4, #11
 80017fa:	1d23      	adds	r3, r4, #4
 80017fc:	f020 0007 	bic.w	r0, r0, #7
 8001800:	1ac3      	subs	r3, r0, r3
 8001802:	d0d3      	beq.n	80017ac <_malloc_r+0x20>
 8001804:	425a      	negs	r2, r3
 8001806:	50e2      	str	r2, [r4, r3]
 8001808:	e7d0      	b.n	80017ac <_malloc_r+0x20>
 800180a:	684b      	ldr	r3, [r1, #4]
 800180c:	428c      	cmp	r4, r1
 800180e:	bf16      	itet	ne
 8001810:	6063      	strne	r3, [r4, #4]
 8001812:	6013      	streq	r3, [r2, #0]
 8001814:	460c      	movne	r4, r1
 8001816:	e7eb      	b.n	80017f0 <_malloc_r+0x64>
 8001818:	460c      	mov	r4, r1
 800181a:	6849      	ldr	r1, [r1, #4]
 800181c:	e7cc      	b.n	80017b8 <_malloc_r+0x2c>
 800181e:	1cc4      	adds	r4, r0, #3
 8001820:	f024 0403 	bic.w	r4, r4, #3
 8001824:	42a0      	cmp	r0, r4
 8001826:	d005      	beq.n	8001834 <_malloc_r+0xa8>
 8001828:	1a21      	subs	r1, r4, r0
 800182a:	4630      	mov	r0, r6
 800182c:	f000 fae2 	bl	8001df4 <_sbrk_r>
 8001830:	3001      	adds	r0, #1
 8001832:	d0cf      	beq.n	80017d4 <_malloc_r+0x48>
 8001834:	6025      	str	r5, [r4, #0]
 8001836:	e7db      	b.n	80017f0 <_malloc_r+0x64>
 8001838:	20000100 	.word	0x20000100
 800183c:	20000104 	.word	0x20000104

08001840 <__ssputs_r>:
 8001840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001844:	688e      	ldr	r6, [r1, #8]
 8001846:	4682      	mov	sl, r0
 8001848:	429e      	cmp	r6, r3
 800184a:	460c      	mov	r4, r1
 800184c:	4690      	mov	r8, r2
 800184e:	4699      	mov	r9, r3
 8001850:	d837      	bhi.n	80018c2 <__ssputs_r+0x82>
 8001852:	898a      	ldrh	r2, [r1, #12]
 8001854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001858:	d031      	beq.n	80018be <__ssputs_r+0x7e>
 800185a:	2302      	movs	r3, #2
 800185c:	6825      	ldr	r5, [r4, #0]
 800185e:	6909      	ldr	r1, [r1, #16]
 8001860:	1a6f      	subs	r7, r5, r1
 8001862:	6965      	ldr	r5, [r4, #20]
 8001864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001868:	fb95 f5f3 	sdiv	r5, r5, r3
 800186c:	f109 0301 	add.w	r3, r9, #1
 8001870:	443b      	add	r3, r7
 8001872:	429d      	cmp	r5, r3
 8001874:	bf38      	it	cc
 8001876:	461d      	movcc	r5, r3
 8001878:	0553      	lsls	r3, r2, #21
 800187a:	d530      	bpl.n	80018de <__ssputs_r+0x9e>
 800187c:	4629      	mov	r1, r5
 800187e:	f7ff ff85 	bl	800178c <_malloc_r>
 8001882:	4606      	mov	r6, r0
 8001884:	b950      	cbnz	r0, 800189c <__ssputs_r+0x5c>
 8001886:	230c      	movs	r3, #12
 8001888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188c:	f8ca 3000 	str.w	r3, [sl]
 8001890:	89a3      	ldrh	r3, [r4, #12]
 8001892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001896:	81a3      	strh	r3, [r4, #12]
 8001898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800189c:	463a      	mov	r2, r7
 800189e:	6921      	ldr	r1, [r4, #16]
 80018a0:	f000 fac6 	bl	8001e30 <memcpy>
 80018a4:	89a3      	ldrh	r3, [r4, #12]
 80018a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	81a3      	strh	r3, [r4, #12]
 80018b0:	6126      	str	r6, [r4, #16]
 80018b2:	443e      	add	r6, r7
 80018b4:	6026      	str	r6, [r4, #0]
 80018b6:	464e      	mov	r6, r9
 80018b8:	6165      	str	r5, [r4, #20]
 80018ba:	1bed      	subs	r5, r5, r7
 80018bc:	60a5      	str	r5, [r4, #8]
 80018be:	454e      	cmp	r6, r9
 80018c0:	d900      	bls.n	80018c4 <__ssputs_r+0x84>
 80018c2:	464e      	mov	r6, r9
 80018c4:	4632      	mov	r2, r6
 80018c6:	4641      	mov	r1, r8
 80018c8:	6820      	ldr	r0, [r4, #0]
 80018ca:	f000 fabc 	bl	8001e46 <memmove>
 80018ce:	68a3      	ldr	r3, [r4, #8]
 80018d0:	2000      	movs	r0, #0
 80018d2:	1b9b      	subs	r3, r3, r6
 80018d4:	60a3      	str	r3, [r4, #8]
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	441e      	add	r6, r3
 80018da:	6026      	str	r6, [r4, #0]
 80018dc:	e7dc      	b.n	8001898 <__ssputs_r+0x58>
 80018de:	462a      	mov	r2, r5
 80018e0:	f000 facc 	bl	8001e7c <_realloc_r>
 80018e4:	4606      	mov	r6, r0
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d1e2      	bne.n	80018b0 <__ssputs_r+0x70>
 80018ea:	6921      	ldr	r1, [r4, #16]
 80018ec:	4650      	mov	r0, sl
 80018ee:	f7ff ff01 	bl	80016f4 <_free_r>
 80018f2:	e7c8      	b.n	8001886 <__ssputs_r+0x46>

080018f4 <_svfiprintf_r>:
 80018f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f8:	461d      	mov	r5, r3
 80018fa:	898b      	ldrh	r3, [r1, #12]
 80018fc:	b09d      	sub	sp, #116	; 0x74
 80018fe:	061f      	lsls	r7, r3, #24
 8001900:	4680      	mov	r8, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4616      	mov	r6, r2
 8001906:	d50f      	bpl.n	8001928 <_svfiprintf_r+0x34>
 8001908:	690b      	ldr	r3, [r1, #16]
 800190a:	b96b      	cbnz	r3, 8001928 <_svfiprintf_r+0x34>
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	f7ff ff3d 	bl	800178c <_malloc_r>
 8001912:	6020      	str	r0, [r4, #0]
 8001914:	6120      	str	r0, [r4, #16]
 8001916:	b928      	cbnz	r0, 8001924 <_svfiprintf_r+0x30>
 8001918:	230c      	movs	r3, #12
 800191a:	f8c8 3000 	str.w	r3, [r8]
 800191e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001922:	e0c8      	b.n	8001ab6 <_svfiprintf_r+0x1c2>
 8001924:	2340      	movs	r3, #64	; 0x40
 8001926:	6163      	str	r3, [r4, #20]
 8001928:	2300      	movs	r3, #0
 800192a:	9309      	str	r3, [sp, #36]	; 0x24
 800192c:	2320      	movs	r3, #32
 800192e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001932:	2330      	movs	r3, #48	; 0x30
 8001934:	f04f 0b01 	mov.w	fp, #1
 8001938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800193c:	9503      	str	r5, [sp, #12]
 800193e:	4637      	mov	r7, r6
 8001940:	463d      	mov	r5, r7
 8001942:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001946:	b10b      	cbz	r3, 800194c <_svfiprintf_r+0x58>
 8001948:	2b25      	cmp	r3, #37	; 0x25
 800194a:	d13e      	bne.n	80019ca <_svfiprintf_r+0xd6>
 800194c:	ebb7 0a06 	subs.w	sl, r7, r6
 8001950:	d00b      	beq.n	800196a <_svfiprintf_r+0x76>
 8001952:	4653      	mov	r3, sl
 8001954:	4632      	mov	r2, r6
 8001956:	4621      	mov	r1, r4
 8001958:	4640      	mov	r0, r8
 800195a:	f7ff ff71 	bl	8001840 <__ssputs_r>
 800195e:	3001      	adds	r0, #1
 8001960:	f000 80a4 	beq.w	8001aac <_svfiprintf_r+0x1b8>
 8001964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001966:	4453      	add	r3, sl
 8001968:	9309      	str	r3, [sp, #36]	; 0x24
 800196a:	783b      	ldrb	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 809d 	beq.w	8001aac <_svfiprintf_r+0x1b8>
 8001972:	2300      	movs	r3, #0
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800197c:	9304      	str	r3, [sp, #16]
 800197e:	9307      	str	r3, [sp, #28]
 8001980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001984:	931a      	str	r3, [sp, #104]	; 0x68
 8001986:	462f      	mov	r7, r5
 8001988:	2205      	movs	r2, #5
 800198a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800198e:	4850      	ldr	r0, [pc, #320]	; (8001ad0 <_svfiprintf_r+0x1dc>)
 8001990:	f000 fa40 	bl	8001e14 <memchr>
 8001994:	9b04      	ldr	r3, [sp, #16]
 8001996:	b9d0      	cbnz	r0, 80019ce <_svfiprintf_r+0xda>
 8001998:	06d9      	lsls	r1, r3, #27
 800199a:	bf44      	itt	mi
 800199c:	2220      	movmi	r2, #32
 800199e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019a2:	071a      	lsls	r2, r3, #28
 80019a4:	bf44      	itt	mi
 80019a6:	222b      	movmi	r2, #43	; 0x2b
 80019a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019ac:	782a      	ldrb	r2, [r5, #0]
 80019ae:	2a2a      	cmp	r2, #42	; 0x2a
 80019b0:	d015      	beq.n	80019de <_svfiprintf_r+0xea>
 80019b2:	462f      	mov	r7, r5
 80019b4:	2000      	movs	r0, #0
 80019b6:	250a      	movs	r5, #10
 80019b8:	9a07      	ldr	r2, [sp, #28]
 80019ba:	4639      	mov	r1, r7
 80019bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019c0:	3b30      	subs	r3, #48	; 0x30
 80019c2:	2b09      	cmp	r3, #9
 80019c4:	d94d      	bls.n	8001a62 <_svfiprintf_r+0x16e>
 80019c6:	b1b8      	cbz	r0, 80019f8 <_svfiprintf_r+0x104>
 80019c8:	e00f      	b.n	80019ea <_svfiprintf_r+0xf6>
 80019ca:	462f      	mov	r7, r5
 80019cc:	e7b8      	b.n	8001940 <_svfiprintf_r+0x4c>
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <_svfiprintf_r+0x1dc>)
 80019d0:	463d      	mov	r5, r7
 80019d2:	1a80      	subs	r0, r0, r2
 80019d4:	fa0b f000 	lsl.w	r0, fp, r0
 80019d8:	4318      	orrs	r0, r3
 80019da:	9004      	str	r0, [sp, #16]
 80019dc:	e7d3      	b.n	8001986 <_svfiprintf_r+0x92>
 80019de:	9a03      	ldr	r2, [sp, #12]
 80019e0:	1d11      	adds	r1, r2, #4
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	db01      	blt.n	80019ee <_svfiprintf_r+0xfa>
 80019ea:	9207      	str	r2, [sp, #28]
 80019ec:	e004      	b.n	80019f8 <_svfiprintf_r+0x104>
 80019ee:	4252      	negs	r2, r2
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	9207      	str	r2, [sp, #28]
 80019f6:	9304      	str	r3, [sp, #16]
 80019f8:	783b      	ldrb	r3, [r7, #0]
 80019fa:	2b2e      	cmp	r3, #46	; 0x2e
 80019fc:	d10c      	bne.n	8001a18 <_svfiprintf_r+0x124>
 80019fe:	787b      	ldrb	r3, [r7, #1]
 8001a00:	2b2a      	cmp	r3, #42	; 0x2a
 8001a02:	d133      	bne.n	8001a6c <_svfiprintf_r+0x178>
 8001a04:	9b03      	ldr	r3, [sp, #12]
 8001a06:	3702      	adds	r7, #2
 8001a08:	1d1a      	adds	r2, r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	9203      	str	r2, [sp, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	4d2e      	ldr	r5, [pc, #184]	; (8001ad4 <_svfiprintf_r+0x1e0>)
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	7839      	ldrb	r1, [r7, #0]
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f000 f9f8 	bl	8001e14 <memchr>
 8001a24:	b138      	cbz	r0, 8001a36 <_svfiprintf_r+0x142>
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	1b40      	subs	r0, r0, r5
 8001a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8001a2e:	9b04      	ldr	r3, [sp, #16]
 8001a30:	3701      	adds	r7, #1
 8001a32:	4303      	orrs	r3, r0
 8001a34:	9304      	str	r3, [sp, #16]
 8001a36:	7839      	ldrb	r1, [r7, #0]
 8001a38:	2206      	movs	r2, #6
 8001a3a:	4827      	ldr	r0, [pc, #156]	; (8001ad8 <_svfiprintf_r+0x1e4>)
 8001a3c:	1c7e      	adds	r6, r7, #1
 8001a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a42:	f000 f9e7 	bl	8001e14 <memchr>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d038      	beq.n	8001abc <_svfiprintf_r+0x1c8>
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <_svfiprintf_r+0x1e8>)
 8001a4c:	bb13      	cbnz	r3, 8001a94 <_svfiprintf_r+0x1a0>
 8001a4e:	9b03      	ldr	r3, [sp, #12]
 8001a50:	3307      	adds	r3, #7
 8001a52:	f023 0307 	bic.w	r3, r3, #7
 8001a56:	3308      	adds	r3, #8
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a5c:	444b      	add	r3, r9
 8001a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a60:	e76d      	b.n	800193e <_svfiprintf_r+0x4a>
 8001a62:	fb05 3202 	mla	r2, r5, r2, r3
 8001a66:	2001      	movs	r0, #1
 8001a68:	460f      	mov	r7, r1
 8001a6a:	e7a6      	b.n	80019ba <_svfiprintf_r+0xc6>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	250a      	movs	r5, #10
 8001a70:	4619      	mov	r1, r3
 8001a72:	3701      	adds	r7, #1
 8001a74:	9305      	str	r3, [sp, #20]
 8001a76:	4638      	mov	r0, r7
 8001a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a7c:	3a30      	subs	r2, #48	; 0x30
 8001a7e:	2a09      	cmp	r2, #9
 8001a80:	d903      	bls.n	8001a8a <_svfiprintf_r+0x196>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0c8      	beq.n	8001a18 <_svfiprintf_r+0x124>
 8001a86:	9105      	str	r1, [sp, #20]
 8001a88:	e7c6      	b.n	8001a18 <_svfiprintf_r+0x124>
 8001a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8001a8e:	2301      	movs	r3, #1
 8001a90:	4607      	mov	r7, r0
 8001a92:	e7f0      	b.n	8001a76 <_svfiprintf_r+0x182>
 8001a94:	ab03      	add	r3, sp, #12
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4622      	mov	r2, r4
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_svfiprintf_r+0x1ec>)
 8001a9c:	a904      	add	r1, sp, #16
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	f3af 8000 	nop.w
 8001aa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001aa8:	4681      	mov	r9, r0
 8001aaa:	d1d6      	bne.n	8001a5a <_svfiprintf_r+0x166>
 8001aac:	89a3      	ldrh	r3, [r4, #12]
 8001aae:	065b      	lsls	r3, r3, #25
 8001ab0:	f53f af35 	bmi.w	800191e <_svfiprintf_r+0x2a>
 8001ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ab6:	b01d      	add	sp, #116	; 0x74
 8001ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001abc:	ab03      	add	r3, sp, #12
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <_svfiprintf_r+0x1ec>)
 8001ac4:	a904      	add	r1, sp, #16
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	f000 f882 	bl	8001bd0 <_printf_i>
 8001acc:	e7ea      	b.n	8001aa4 <_svfiprintf_r+0x1b0>
 8001ace:	bf00      	nop
 8001ad0:	08001f28 	.word	0x08001f28
 8001ad4:	08001f2e 	.word	0x08001f2e
 8001ad8:	08001f32 	.word	0x08001f32
 8001adc:	00000000 	.word	0x00000000
 8001ae0:	08001841 	.word	0x08001841

08001ae4 <_printf_common>:
 8001ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae8:	4691      	mov	r9, r2
 8001aea:	461f      	mov	r7, r3
 8001aec:	688a      	ldr	r2, [r1, #8]
 8001aee:	690b      	ldr	r3, [r1, #16]
 8001af0:	4606      	mov	r6, r0
 8001af2:	4293      	cmp	r3, r2
 8001af4:	bfb8      	it	lt
 8001af6:	4613      	movlt	r3, r2
 8001af8:	f8c9 3000 	str.w	r3, [r9]
 8001afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b00:	460c      	mov	r4, r1
 8001b02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b06:	b112      	cbz	r2, 8001b0e <_printf_common+0x2a>
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f8c9 3000 	str.w	r3, [r9]
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	0699      	lsls	r1, r3, #26
 8001b12:	bf42      	ittt	mi
 8001b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b18:	3302      	addmi	r3, #2
 8001b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8001b1e:	6825      	ldr	r5, [r4, #0]
 8001b20:	f015 0506 	ands.w	r5, r5, #6
 8001b24:	d107      	bne.n	8001b36 <_printf_common+0x52>
 8001b26:	f104 0a19 	add.w	sl, r4, #25
 8001b2a:	68e3      	ldr	r3, [r4, #12]
 8001b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	42ab      	cmp	r3, r5
 8001b34:	dc29      	bgt.n	8001b8a <_printf_common+0xa6>
 8001b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	3300      	adds	r3, #0
 8001b3e:	bf18      	it	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	0692      	lsls	r2, r2, #26
 8001b44:	d42e      	bmi.n	8001ba4 <_printf_common+0xc0>
 8001b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b4a:	4639      	mov	r1, r7
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	47c0      	blx	r8
 8001b50:	3001      	adds	r0, #1
 8001b52:	d021      	beq.n	8001b98 <_printf_common+0xb4>
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	68e5      	ldr	r5, [r4, #12]
 8001b58:	f003 0306 	and.w	r3, r3, #6
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	bf18      	it	ne
 8001b60:	2500      	movne	r5, #0
 8001b62:	f8d9 2000 	ldr.w	r2, [r9]
 8001b66:	f04f 0900 	mov.w	r9, #0
 8001b6a:	bf08      	it	eq
 8001b6c:	1aad      	subeq	r5, r5, r2
 8001b6e:	68a3      	ldr	r3, [r4, #8]
 8001b70:	6922      	ldr	r2, [r4, #16]
 8001b72:	bf08      	it	eq
 8001b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bfc4      	itt	gt
 8001b7c:	1a9b      	subgt	r3, r3, r2
 8001b7e:	18ed      	addgt	r5, r5, r3
 8001b80:	341a      	adds	r4, #26
 8001b82:	454d      	cmp	r5, r9
 8001b84:	d11a      	bne.n	8001bbc <_printf_common+0xd8>
 8001b86:	2000      	movs	r0, #0
 8001b88:	e008      	b.n	8001b9c <_printf_common+0xb8>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	4639      	mov	r1, r7
 8001b90:	4630      	mov	r0, r6
 8001b92:	47c0      	blx	r8
 8001b94:	3001      	adds	r0, #1
 8001b96:	d103      	bne.n	8001ba0 <_printf_common+0xbc>
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba0:	3501      	adds	r5, #1
 8001ba2:	e7c2      	b.n	8001b2a <_printf_common+0x46>
 8001ba4:	2030      	movs	r0, #48	; 0x30
 8001ba6:	18e1      	adds	r1, r4, r3
 8001ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bb2:	4422      	add	r2, r4
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bba:	e7c4      	b.n	8001b46 <_printf_common+0x62>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	4639      	mov	r1, r7
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	47c0      	blx	r8
 8001bc6:	3001      	adds	r0, #1
 8001bc8:	d0e6      	beq.n	8001b98 <_printf_common+0xb4>
 8001bca:	f109 0901 	add.w	r9, r9, #1
 8001bce:	e7d8      	b.n	8001b82 <_printf_common+0x9e>

08001bd0 <_printf_i>:
 8001bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bd8:	460c      	mov	r4, r1
 8001bda:	7e09      	ldrb	r1, [r1, #24]
 8001bdc:	b085      	sub	sp, #20
 8001bde:	296e      	cmp	r1, #110	; 0x6e
 8001be0:	4617      	mov	r7, r2
 8001be2:	4606      	mov	r6, r0
 8001be4:	4698      	mov	r8, r3
 8001be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001be8:	f000 80b3 	beq.w	8001d52 <_printf_i+0x182>
 8001bec:	d822      	bhi.n	8001c34 <_printf_i+0x64>
 8001bee:	2963      	cmp	r1, #99	; 0x63
 8001bf0:	d036      	beq.n	8001c60 <_printf_i+0x90>
 8001bf2:	d80a      	bhi.n	8001c0a <_printf_i+0x3a>
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	f000 80b9 	beq.w	8001d6c <_printf_i+0x19c>
 8001bfa:	2958      	cmp	r1, #88	; 0x58
 8001bfc:	f000 8083 	beq.w	8001d06 <_printf_i+0x136>
 8001c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c08:	e032      	b.n	8001c70 <_printf_i+0xa0>
 8001c0a:	2964      	cmp	r1, #100	; 0x64
 8001c0c:	d001      	beq.n	8001c12 <_printf_i+0x42>
 8001c0e:	2969      	cmp	r1, #105	; 0x69
 8001c10:	d1f6      	bne.n	8001c00 <_printf_i+0x30>
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	0605      	lsls	r5, r0, #24
 8001c18:	f103 0104 	add.w	r1, r3, #4
 8001c1c:	d52a      	bpl.n	8001c74 <_printf_i+0xa4>
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da03      	bge.n	8001c2e <_printf_i+0x5e>
 8001c26:	222d      	movs	r2, #45	; 0x2d
 8001c28:	425b      	negs	r3, r3
 8001c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c2e:	486f      	ldr	r0, [pc, #444]	; (8001dec <_printf_i+0x21c>)
 8001c30:	220a      	movs	r2, #10
 8001c32:	e039      	b.n	8001ca8 <_printf_i+0xd8>
 8001c34:	2973      	cmp	r1, #115	; 0x73
 8001c36:	f000 809d 	beq.w	8001d74 <_printf_i+0x1a4>
 8001c3a:	d808      	bhi.n	8001c4e <_printf_i+0x7e>
 8001c3c:	296f      	cmp	r1, #111	; 0x6f
 8001c3e:	d020      	beq.n	8001c82 <_printf_i+0xb2>
 8001c40:	2970      	cmp	r1, #112	; 0x70
 8001c42:	d1dd      	bne.n	8001c00 <_printf_i+0x30>
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f043 0320 	orr.w	r3, r3, #32
 8001c4a:	6023      	str	r3, [r4, #0]
 8001c4c:	e003      	b.n	8001c56 <_printf_i+0x86>
 8001c4e:	2975      	cmp	r1, #117	; 0x75
 8001c50:	d017      	beq.n	8001c82 <_printf_i+0xb2>
 8001c52:	2978      	cmp	r1, #120	; 0x78
 8001c54:	d1d4      	bne.n	8001c00 <_printf_i+0x30>
 8001c56:	2378      	movs	r3, #120	; 0x78
 8001c58:	4865      	ldr	r0, [pc, #404]	; (8001df0 <_printf_i+0x220>)
 8001c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c5e:	e055      	b.n	8001d0c <_printf_i+0x13c>
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c66:	1d19      	adds	r1, r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6011      	str	r1, [r2, #0]
 8001c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c70:	2301      	movs	r3, #1
 8001c72:	e08c      	b.n	8001d8e <_printf_i+0x1be>
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c7a:	6011      	str	r1, [r2, #0]
 8001c7c:	bf18      	it	ne
 8001c7e:	b21b      	sxthne	r3, r3
 8001c80:	e7cf      	b.n	8001c22 <_printf_i+0x52>
 8001c82:	6813      	ldr	r3, [r2, #0]
 8001c84:	6825      	ldr	r5, [r4, #0]
 8001c86:	1d18      	adds	r0, r3, #4
 8001c88:	6010      	str	r0, [r2, #0]
 8001c8a:	0628      	lsls	r0, r5, #24
 8001c8c:	d501      	bpl.n	8001c92 <_printf_i+0xc2>
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <_printf_i+0xc8>
 8001c92:	0668      	lsls	r0, r5, #25
 8001c94:	d5fb      	bpl.n	8001c8e <_printf_i+0xbe>
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	296f      	cmp	r1, #111	; 0x6f
 8001c9a:	bf14      	ite	ne
 8001c9c:	220a      	movne	r2, #10
 8001c9e:	2208      	moveq	r2, #8
 8001ca0:	4852      	ldr	r0, [pc, #328]	; (8001dec <_printf_i+0x21c>)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ca8:	6865      	ldr	r5, [r4, #4]
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	60a5      	str	r5, [r4, #8]
 8001cae:	f2c0 8095 	blt.w	8001ddc <_printf_i+0x20c>
 8001cb2:	6821      	ldr	r1, [r4, #0]
 8001cb4:	f021 0104 	bic.w	r1, r1, #4
 8001cb8:	6021      	str	r1, [r4, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d13d      	bne.n	8001d3a <_printf_i+0x16a>
 8001cbe:	2d00      	cmp	r5, #0
 8001cc0:	f040 808e 	bne.w	8001de0 <_printf_i+0x210>
 8001cc4:	4665      	mov	r5, ip
 8001cc6:	2a08      	cmp	r2, #8
 8001cc8:	d10b      	bne.n	8001ce2 <_printf_i+0x112>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	07db      	lsls	r3, r3, #31
 8001cce:	d508      	bpl.n	8001ce2 <_printf_i+0x112>
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	6862      	ldr	r2, [r4, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	bfde      	ittt	le
 8001cd8:	2330      	movle	r3, #48	; 0x30
 8001cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ce2:	ebac 0305 	sub.w	r3, ip, r5
 8001ce6:	6123      	str	r3, [r4, #16]
 8001ce8:	f8cd 8000 	str.w	r8, [sp]
 8001cec:	463b      	mov	r3, r7
 8001cee:	aa03      	add	r2, sp, #12
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f7ff fef6 	bl	8001ae4 <_printf_common>
 8001cf8:	3001      	adds	r0, #1
 8001cfa:	d14d      	bne.n	8001d98 <_printf_i+0x1c8>
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d00:	b005      	add	sp, #20
 8001d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d06:	4839      	ldr	r0, [pc, #228]	; (8001dec <_printf_i+0x21c>)
 8001d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	6821      	ldr	r1, [r4, #0]
 8001d10:	1d1d      	adds	r5, r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6015      	str	r5, [r2, #0]
 8001d16:	060a      	lsls	r2, r1, #24
 8001d18:	d50b      	bpl.n	8001d32 <_printf_i+0x162>
 8001d1a:	07ca      	lsls	r2, r1, #31
 8001d1c:	bf44      	itt	mi
 8001d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8001d22:	6021      	strmi	r1, [r4, #0]
 8001d24:	b91b      	cbnz	r3, 8001d2e <_printf_i+0x15e>
 8001d26:	6822      	ldr	r2, [r4, #0]
 8001d28:	f022 0220 	bic.w	r2, r2, #32
 8001d2c:	6022      	str	r2, [r4, #0]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	e7b7      	b.n	8001ca2 <_printf_i+0xd2>
 8001d32:	064d      	lsls	r5, r1, #25
 8001d34:	bf48      	it	mi
 8001d36:	b29b      	uxthmi	r3, r3
 8001d38:	e7ef      	b.n	8001d1a <_printf_i+0x14a>
 8001d3a:	4665      	mov	r5, ip
 8001d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d40:	fb02 3311 	mls	r3, r2, r1, r3
 8001d44:	5cc3      	ldrb	r3, [r0, r3]
 8001d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d1f5      	bne.n	8001d3c <_printf_i+0x16c>
 8001d50:	e7b9      	b.n	8001cc6 <_printf_i+0xf6>
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	6825      	ldr	r5, [r4, #0]
 8001d56:	1d18      	adds	r0, r3, #4
 8001d58:	6961      	ldr	r1, [r4, #20]
 8001d5a:	6010      	str	r0, [r2, #0]
 8001d5c:	0628      	lsls	r0, r5, #24
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	d501      	bpl.n	8001d66 <_printf_i+0x196>
 8001d62:	6019      	str	r1, [r3, #0]
 8001d64:	e002      	b.n	8001d6c <_printf_i+0x19c>
 8001d66:	066a      	lsls	r2, r5, #25
 8001d68:	d5fb      	bpl.n	8001d62 <_printf_i+0x192>
 8001d6a:	8019      	strh	r1, [r3, #0]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	4665      	mov	r5, ip
 8001d70:	6123      	str	r3, [r4, #16]
 8001d72:	e7b9      	b.n	8001ce8 <_printf_i+0x118>
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	1d19      	adds	r1, r3, #4
 8001d78:	6011      	str	r1, [r2, #0]
 8001d7a:	681d      	ldr	r5, [r3, #0]
 8001d7c:	6862      	ldr	r2, [r4, #4]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4628      	mov	r0, r5
 8001d82:	f000 f847 	bl	8001e14 <memchr>
 8001d86:	b108      	cbz	r0, 8001d8c <_printf_i+0x1bc>
 8001d88:	1b40      	subs	r0, r0, r5
 8001d8a:	6060      	str	r0, [r4, #4]
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	6123      	str	r3, [r4, #16]
 8001d90:	2300      	movs	r3, #0
 8001d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d96:	e7a7      	b.n	8001ce8 <_printf_i+0x118>
 8001d98:	6923      	ldr	r3, [r4, #16]
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	4639      	mov	r1, r7
 8001d9e:	4630      	mov	r0, r6
 8001da0:	47c0      	blx	r8
 8001da2:	3001      	adds	r0, #1
 8001da4:	d0aa      	beq.n	8001cfc <_printf_i+0x12c>
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	079b      	lsls	r3, r3, #30
 8001daa:	d413      	bmi.n	8001dd4 <_printf_i+0x204>
 8001dac:	68e0      	ldr	r0, [r4, #12]
 8001dae:	9b03      	ldr	r3, [sp, #12]
 8001db0:	4298      	cmp	r0, r3
 8001db2:	bfb8      	it	lt
 8001db4:	4618      	movlt	r0, r3
 8001db6:	e7a3      	b.n	8001d00 <_printf_i+0x130>
 8001db8:	2301      	movs	r3, #1
 8001dba:	464a      	mov	r2, r9
 8001dbc:	4639      	mov	r1, r7
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	47c0      	blx	r8
 8001dc2:	3001      	adds	r0, #1
 8001dc4:	d09a      	beq.n	8001cfc <_printf_i+0x12c>
 8001dc6:	3501      	adds	r5, #1
 8001dc8:	68e3      	ldr	r3, [r4, #12]
 8001dca:	9a03      	ldr	r2, [sp, #12]
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	42ab      	cmp	r3, r5
 8001dd0:	dcf2      	bgt.n	8001db8 <_printf_i+0x1e8>
 8001dd2:	e7eb      	b.n	8001dac <_printf_i+0x1dc>
 8001dd4:	2500      	movs	r5, #0
 8001dd6:	f104 0919 	add.w	r9, r4, #25
 8001dda:	e7f5      	b.n	8001dc8 <_printf_i+0x1f8>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ac      	bne.n	8001d3a <_printf_i+0x16a>
 8001de0:	7803      	ldrb	r3, [r0, #0]
 8001de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dea:	e76c      	b.n	8001cc6 <_printf_i+0xf6>
 8001dec:	08001f39 	.word	0x08001f39
 8001df0:	08001f4a 	.word	0x08001f4a

08001df4 <_sbrk_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	2300      	movs	r3, #0
 8001df8:	4c05      	ldr	r4, [pc, #20]	; (8001e10 <_sbrk_r+0x1c>)
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	6023      	str	r3, [r4, #0]
 8001e00:	f7fe fc74 	bl	80006ec <_sbrk>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d102      	bne.n	8001e0e <_sbrk_r+0x1a>
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	b103      	cbz	r3, 8001e0e <_sbrk_r+0x1a>
 8001e0c:	602b      	str	r3, [r5, #0]
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	2000010c 	.word	0x2000010c

08001e14 <memchr>:
 8001e14:	b510      	push	{r4, lr}
 8001e16:	b2c9      	uxtb	r1, r1
 8001e18:	4402      	add	r2, r0
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	d101      	bne.n	8001e24 <memchr+0x10>
 8001e20:	2300      	movs	r3, #0
 8001e22:	e003      	b.n	8001e2c <memchr+0x18>
 8001e24:	781c      	ldrb	r4, [r3, #0]
 8001e26:	3001      	adds	r0, #1
 8001e28:	428c      	cmp	r4, r1
 8001e2a:	d1f6      	bne.n	8001e1a <memchr+0x6>
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd10      	pop	{r4, pc}

08001e30 <memcpy>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	1e43      	subs	r3, r0, #1
 8001e34:	440a      	add	r2, r1
 8001e36:	4291      	cmp	r1, r2
 8001e38:	d100      	bne.n	8001e3c <memcpy+0xc>
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e44:	e7f7      	b.n	8001e36 <memcpy+0x6>

08001e46 <memmove>:
 8001e46:	4288      	cmp	r0, r1
 8001e48:	b510      	push	{r4, lr}
 8001e4a:	eb01 0302 	add.w	r3, r1, r2
 8001e4e:	d807      	bhi.n	8001e60 <memmove+0x1a>
 8001e50:	1e42      	subs	r2, r0, #1
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d00a      	beq.n	8001e6c <memmove+0x26>
 8001e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001e5e:	e7f8      	b.n	8001e52 <memmove+0xc>
 8001e60:	4283      	cmp	r3, r0
 8001e62:	d9f5      	bls.n	8001e50 <memmove+0xa>
 8001e64:	1881      	adds	r1, r0, r2
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	42d3      	cmn	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <memmove+0x28>
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001e76:	e7f7      	b.n	8001e68 <memmove+0x22>

08001e78 <__malloc_lock>:
 8001e78:	4770      	bx	lr

08001e7a <__malloc_unlock>:
 8001e7a:	4770      	bx	lr

08001e7c <_realloc_r>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	4607      	mov	r7, r0
 8001e80:	4614      	mov	r4, r2
 8001e82:	460e      	mov	r6, r1
 8001e84:	b921      	cbnz	r1, 8001e90 <_realloc_r+0x14>
 8001e86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	f7ff bc7e 	b.w	800178c <_malloc_r>
 8001e90:	b922      	cbnz	r2, 8001e9c <_realloc_r+0x20>
 8001e92:	f7ff fc2f 	bl	80016f4 <_free_r>
 8001e96:	4625      	mov	r5, r4
 8001e98:	4628      	mov	r0, r5
 8001e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e9c:	f000 f814 	bl	8001ec8 <_malloc_usable_size_r>
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d20f      	bcs.n	8001ec4 <_realloc_r+0x48>
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	f7ff fc70 	bl	800178c <_malloc_r>
 8001eac:	4605      	mov	r5, r0
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d0f2      	beq.n	8001e98 <_realloc_r+0x1c>
 8001eb2:	4631      	mov	r1, r6
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	f7ff ffbb 	bl	8001e30 <memcpy>
 8001eba:	4631      	mov	r1, r6
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	f7ff fc19 	bl	80016f4 <_free_r>
 8001ec2:	e7e9      	b.n	8001e98 <_realloc_r+0x1c>
 8001ec4:	4635      	mov	r5, r6
 8001ec6:	e7e7      	b.n	8001e98 <_realloc_r+0x1c>

08001ec8 <_malloc_usable_size_r>:
 8001ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ecc:	1f18      	subs	r0, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bfbc      	itt	lt
 8001ed2:	580b      	ldrlt	r3, [r1, r0]
 8001ed4:	18c0      	addlt	r0, r0, r3
 8001ed6:	4770      	bx	lr

08001ed8 <_gettimeofday>:
 8001ed8:	2258      	movs	r2, #88	; 0x58
 8001eda:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <_gettimeofday+0xc>)
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	4770      	bx	lr
 8001ee4:	2000010c 	.word	0x2000010c

08001ee8 <_init>:
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	bf00      	nop
 8001eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eee:	bc08      	pop	{r3}
 8001ef0:	469e      	mov	lr, r3
 8001ef2:	4770      	bx	lr

08001ef4 <_fini>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr
