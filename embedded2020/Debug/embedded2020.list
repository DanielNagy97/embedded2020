
embedded2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f48  08001f48  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08001f48  08001f48  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f48  08001f48  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f48  08001f48  00011f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f4c  08001f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08001f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200000c0  08002010  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002010  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cc8  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011a7  00000000  00000000  00024db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000458  00000000  00000000  00025f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b0  00000000  00000000  000263b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ca0  00000000  00000000  00026760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c07  00000000  00000000  0003d400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007feaa  00000000  00000000  00042007  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001354  00000000  00000000  000c1f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000c3280  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000c32a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ed4 	.word	0x08001ed4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08001ed4 	.word	0x08001ed4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval intsrand(time(NULL));   // Initialization, should only be called once.
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b095      	sub	sp, #84	; 0x54
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb1b 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f831 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f875 	bl	8000258 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  max_init(0x01);
 800016e:	2001      	movs	r0, #1
 8000170:	f000 f926 	bl	80003c0 <max_init>
  srand(time(NULL));
 8000174:	2000      	movs	r0, #0
 8000176:	f001 fa7f 	bl	8001678 <time>
 800017a:	4603      	mov	r3, r0
 800017c:	460c      	mov	r4, r1
 800017e:	4618      	mov	r0, r3
 8000180:	f001 fa02 	bl	8001588 <srand>

  char text_buffer[80] = {0};
 8000184:	463b      	mov	r3, r7
 8000186:	2250      	movs	r2, #80	; 0x50
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f001 f9f4 	bl	8001578 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(text_buffer, "%d", rand() % 100);
 8000190:	f001 fa1e 	bl	80015d0 <rand>
 8000194:	4602      	mov	r2, r0
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <main+0x68>)
 8000198:	fb83 1302 	smull	r1, r3, r3, r2
 800019c:	1159      	asrs	r1, r3, #5
 800019e:	17d3      	asrs	r3, r2, #31
 80001a0:	1acb      	subs	r3, r1, r3
 80001a2:	2164      	movs	r1, #100	; 0x64
 80001a4:	fb01 f303 	mul.w	r3, r1, r3
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	4638      	mov	r0, r7
 80001ac:	461a      	mov	r2, r3
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <main+0x6c>)
 80001b0:	f001 fa42 	bl	8001638 <siprintf>
	  scroll_text_left(text_buffer, 40, 6);
 80001b4:	463b      	mov	r3, r7
 80001b6:	2206      	movs	r2, #6
 80001b8:	2128      	movs	r1, #40	; 0x28
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f9c2 	bl	8000544 <scroll_text_left>
	  sprintf(text_buffer, "%d", rand() % 100);
 80001c0:	e7e6      	b.n	8000190 <main+0x34>
 80001c2:	bf00      	nop
 80001c4:	51eb851f 	.word	0x51eb851f
 80001c8:	08001eec 	.word	0x08001eec

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 f9cc 	bl	8001578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fd9b 	bl	8000d50 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000220:	f000 f858 	bl	80002d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 f806 	bl	8001250 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024a:	f000 f843 	bl	80002d4 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <MX_GPIO_Init+0x74>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a16      	ldr	r2, [pc, #88]	; (80002cc <MX_GPIO_Init+0x74>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <MX_GPIO_Init+0x74>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_GPIO_Init+0x74>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a10      	ldr	r2, [pc, #64]	; (80002cc <MX_GPIO_Init+0x74>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_GPIO_Init+0x74>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clock_Pin|cs_Pin|data_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	21e0      	movs	r1, #224	; 0xe0
 80002a0:	480b      	ldr	r0, [pc, #44]	; (80002d0 <MX_GPIO_Init+0x78>)
 80002a2:	f000 fd3d 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : clock_Pin cs_Pin data_Pin */
  GPIO_InitStruct.Pin = clock_Pin|cs_Pin|data_Pin;
 80002a6:	23e0      	movs	r3, #224	; 0xe0
 80002a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	2301      	movs	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b2:	2302      	movs	r3, #2
 80002b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_GPIO_Init+0x78>)
 80002be:	f000 fbd5 	bl	8000a6c <HAL_GPIO_Init>

}
 80002c2:	bf00      	nop
 80002c4:	3718      	adds	r7, #24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010800 	.word	0x40010800

080002d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <write_byte>:
{0x1e, 0x33, 0x33, 0x1f, 0x3,  0x33, 0x1e, 0x0},//9
};

uint8_t screen_buffer[NUMBER_OF_CELLS][8] = {0};

void write_byte (uint8_t byte){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	/**
	  * @brief Writing a byte to the MAX7219 led drivers
	  * @param byte The input byte as uint8_t
	  * @return None
	  */
	for (int i = 0; i<8; i++){
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e018      	b.n	8000322 <write_byte+0x42>
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2120      	movs	r1, #32
 80002f4:	480e      	ldr	r0, [pc, #56]	; (8000330 <write_byte+0x50>)
 80002f6:	f000 fd13 	bl	8000d20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (MAXPORT, DATA_PIN, byte&0x80);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <write_byte+0x50>)
 8000308:	f000 fd0a 	bl	8000d20 <HAL_GPIO_WritePin>
		byte = byte<<1;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (MAXPORT, CLOCK_PIN, 1);
 8000312:	2201      	movs	r2, #1
 8000314:	2120      	movs	r1, #32
 8000316:	4806      	ldr	r0, [pc, #24]	; (8000330 <write_byte+0x50>)
 8000318:	f000 fd02 	bl	8000d20 <HAL_GPIO_WritePin>
	for (int i = 0; i<8; i++){
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	2b07      	cmp	r3, #7
 8000326:	dde3      	ble.n	80002f0 <write_byte+0x10>
	}
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010800 	.word	0x40010800

08000334 <write_max_cmd>:

void write_max_cmd (uint8_t address, uint8_t cmd){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	460a      	mov	r2, r1
 800033e:	71fb      	strb	r3, [r7, #7]
 8000340:	4613      	mov	r3, r2
 8000342:	71bb      	strb	r3, [r7, #6]
	  * @brief Sending commands to the MAX7219 led drivers
	  * @param address The register's address as uint8_t
	  * @param cmd The command to the register as uint8_t
	  * @return None
	  */
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2140      	movs	r1, #64	; 0x40
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <write_max_cmd+0x58>)
 800034a:	f000 fce9 	bl	8000d20 <HAL_GPIO_WritePin>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	e00a      	b.n	800036a <write_max_cmd+0x36>
		write_byte (address);
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffc2 	bl	80002e0 <write_byte>
		write_byte (cmd);
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ffbe 	bl	80002e0 <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2b03      	cmp	r3, #3
 800036e:	ddf1      	ble.n	8000354 <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <write_max_cmd+0x58>)
 8000376:	f000 fcd3 	bl	8000d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2140      	movs	r1, #64	; 0x40
 800037e:	4803      	ldr	r0, [pc, #12]	; (800038c <write_max_cmd+0x58>)
 8000380:	f000 fcce 	bl	8000d20 <HAL_GPIO_WritePin>
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40010800 	.word	0x40010800

08000390 <max_clear>:

void max_clear(){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	/**
	  * @brief Initializing the MAX7219 led drivers
	  * @param None
	  * @return None
	  */
	for(int i = 0; i<8; i++){
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	e00a      	b.n	80003b2 <max_clear+0x22>
		write_max_cmd(i+1, 0);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffc4 	bl	8000334 <write_max_cmd>
	for(int i = 0; i<8; i++){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	ddf1      	ble.n	800039c <max_clear+0xc>
	}
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <max_init>:

void max_init (uint8_t brightness){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	/**
	  * @brief Initialising the MAX7219 led drivers
	  * @param brightness The intensity of the screen as uint8_t
	  * @return None
	  */
	max_clear();
 80003ca:	f7ff ffe1 	bl	8000390 <max_clear>
	write_max_cmd(0x09, 0x00); /* decoding = 0 */
 80003ce:	2100      	movs	r1, #0
 80003d0:	2009      	movs	r0, #9
 80003d2:	f7ff ffaf 	bl	8000334 <write_max_cmd>
	write_max_cmd(0x0b, 0x07); /* scan limit = 8 */
 80003d6:	2107      	movs	r1, #7
 80003d8:	200b      	movs	r0, #11
 80003da:	f7ff ffab 	bl	8000334 <write_max_cmd>
	write_max_cmd(0x0c, 0x01); /* mode = 1 */
 80003de:	2101      	movs	r1, #1
 80003e0:	200c      	movs	r0, #12
 80003e2:	f7ff ffa7 	bl	8000334 <write_max_cmd>
	write_max_cmd(0x0f, 0x00); /* test display = 0 */
 80003e6:	2100      	movs	r1, #0
 80003e8:	200f      	movs	r0, #15
 80003ea:	f7ff ffa3 	bl	8000334 <write_max_cmd>
	write_max_cmd(0x0a, brightness);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4619      	mov	r1, r3
 80003f2:	200a      	movs	r0, #10
 80003f4:	f7ff ff9e 	bl	8000334 <write_max_cmd>
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <set_byte_on_matrix>:

void set_byte_on_matrix(uint8_t byte, uint8_t row, uint8_t column){
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
 800040a:	460b      	mov	r3, r1
 800040c:	71bb      	strb	r3, [r7, #6]
 800040e:	4613      	mov	r3, r2
 8000410:	717b      	strb	r3, [r7, #5]
	  * @param byte The input byte as uint8_t
	  * @param row Destination row
	  * @param column Destination column
	  * @return None
	  */
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	4816      	ldr	r0, [pc, #88]	; (8000470 <set_byte_on_matrix+0x70>)
 8000418:	f000 fc82 	bl	8000d20 <HAL_GPIO_WritePin>

	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e015      	b.n	800044e <set_byte_on_matrix+0x4e>
		if(i == column){
 8000422:	797b      	ldrb	r3, [r7, #5]
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	429a      	cmp	r2, r3
 8000428:	d108      	bne.n	800043c <set_byte_on_matrix+0x3c>
			write_byte (row);
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff57 	bl	80002e0 <write_byte>
			write_byte (byte);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff ff53 	bl	80002e0 <write_byte>
 800043a:	e005      	b.n	8000448 <set_byte_on_matrix+0x48>
		}
		else{
			write_byte (0);
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff ff4f 	bl	80002e0 <write_byte>
			write_byte (0);
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff ff4c 	bl	80002e0 <write_byte>
	for (int i = 0; i<NUMBER_OF_CELLS; i++){
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3301      	adds	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	2b03      	cmp	r3, #3
 8000452:	dde6      	ble.n	8000422 <set_byte_on_matrix+0x22>
		}
	}
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <set_byte_on_matrix+0x70>)
 800045a:	f000 fc61 	bl	8000d20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (MAXPORT, CS_PIN, 1);
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	4803      	ldr	r0, [pc, #12]	; (8000470 <set_byte_on_matrix+0x70>)
 8000464:	f000 fc5c 	bl	8000d20 <HAL_GPIO_WritePin>
}
 8000468:	bf00      	nop
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40010800 	.word	0x40010800

08000474 <display_screen_buffer>:
	for(int j = 0; j<8; j++){
		set_byte_on_matrix(character[j], j+1, cell);
	}
}

void display_screen_buffer(){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
	/**
	  * @brief Displaying the screen buffer on the led matrixes
	  * @param None
	  * @return None
	  */
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	e01b      	b.n	80004b8 <display_screen_buffer+0x44>
		for(int j = 0; j<8; j++){
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	e012      	b.n	80004ac <display_screen_buffer+0x38>
			set_byte_on_matrix(screen_buffer[i][j], j+1, i);
 8000486:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <display_screen_buffer+0x54>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	00db      	lsls	r3, r3, #3
 800048c:	441a      	add	r2, r3
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	4413      	add	r3, r2
 8000492:	7818      	ldrb	r0, [r3, #0]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	3301      	adds	r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	b2d2      	uxtb	r2, r2
 80004a0:	4619      	mov	r1, r3
 80004a2:	f7ff ffad 	bl	8000400 <set_byte_on_matrix>
		for(int j = 0; j<8; j++){
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	2b07      	cmp	r3, #7
 80004b0:	dde9      	ble.n	8000486 <display_screen_buffer+0x12>
	for(int i = 0; i<NUMBER_OF_CELLS; i++){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3301      	adds	r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	dde0      	ble.n	8000480 <display_screen_buffer+0xc>
		}
	}
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000dc 	.word	0x200000dc

080004cc <shift_screen_buffer_left>:
					| (screen_buffer[k-1][j] & 0x1) << 7;
		}
	}
}

void shift_screen_buffer_left(){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
	/**
	  * @brief Shifting the whole screen buffer by 1 bit to the left
	  * @param None
	  * @return None
	  */
	for(int k = 0; k<NUMBER_OF_CELLS; k++){
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e02a      	b.n	800052e <shift_screen_buffer_left+0x62>
		for(int j = 0; j<8; j++){
 80004d8:	2300      	movs	r3, #0
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	e021      	b.n	8000522 <shift_screen_buffer_left+0x56>
			screen_buffer[k][j] =
				screen_buffer[k][j] << 1
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <shift_screen_buffer_left+0x74>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	441a      	add	r2, r3
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	005b      	lsls	r3, r3, #1
					| (screen_buffer[k+1][j] & 0x80) >> 7;
 80004ee:	b25a      	sxtb	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	4912      	ldr	r1, [pc, #72]	; (8000540 <shift_screen_buffer_left+0x74>)
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	4419      	add	r1, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	440b      	add	r3, r1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	09db      	lsrs	r3, r3, #7
 8000502:	b2db      	uxtb	r3, r3
 8000504:	b25b      	sxtb	r3, r3
 8000506:	4313      	orrs	r3, r2
 8000508:	b25b      	sxtb	r3, r3
 800050a:	b2d9      	uxtb	r1, r3
			screen_buffer[k][j] =
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <shift_screen_buffer_left+0x74>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	441a      	add	r2, r3
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	4413      	add	r3, r2
 8000518:	460a      	mov	r2, r1
 800051a:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<8; j++){
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b07      	cmp	r3, #7
 8000526:	ddda      	ble.n	80004de <shift_screen_buffer_left+0x12>
	for(int k = 0; k<NUMBER_OF_CELLS; k++){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3301      	adds	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b03      	cmp	r3, #3
 8000532:	ddd1      	ble.n	80004d8 <shift_screen_buffer_left+0xc>
		}
	}
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000dc 	.word	0x200000dc

08000544 <scroll_text_left>:

void scroll_text_left(char* text, uint16_t speed, uint8_t blank_space){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
 8000550:	4613      	mov	r3, r2
 8000552:	707b      	strb	r3, [r7, #1]
	  * @param text The input text as char*
	  * @param speed The delay rate of the shifting as uint16_t
	  * @param blank_space The 0 bits after the text as uint8_t
	  * @return None
	  */
	for(int k = 0; k<strlen(text); k++){
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	e041      	b.n	80005de <scroll_text_left+0x9a>
		for(int j = 7; j>=0; j--){
 800055a:	2307      	movs	r3, #7
 800055c:	613b      	str	r3, [r7, #16]
 800055e:	e038      	b.n	80005d2 <scroll_text_left+0x8e>
			shift_screen_buffer_left();
 8000560:	f7ff ffb4 	bl	80004cc <shift_screen_buffer_left>
			for(int i = 0; i<8; i++){
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e027      	b.n	80005ba <scroll_text_left+0x76>
				/* bit masking - The k.th bit of n: (n & ( 1 << k )) >> k */
				screen_buffer[3][i] =
				    screen_buffer[3][i]
 800056a:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <scroll_text_left+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4413      	add	r3, r2
 8000570:	3318      	adds	r3, #24
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b25a      	sxtb	r2, r3
					    | (numbers[text[k]-0x30][i] & ( 1 << j )) >> j;
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	440b      	add	r3, r1
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	3b30      	subs	r3, #48	; 0x30
 8000580:	4926      	ldr	r1, [pc, #152]	; (800061c <scroll_text_left+0xd8>)
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	4419      	add	r1, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	440b      	add	r3, r1
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	2101      	movs	r1, #1
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	ea00 0103 	and.w	r1, r0, r3
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	fa41 f303 	asr.w	r3, r1, r3
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	b2d9      	uxtb	r1, r3
				screen_buffer[3][i] =
 80005a8:	4a1b      	ldr	r2, [pc, #108]	; (8000618 <scroll_text_left+0xd4>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	3318      	adds	r3, #24
 80005b0:	460a      	mov	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<8; i++){
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2b07      	cmp	r3, #7
 80005be:	ddd4      	ble.n	800056a <scroll_text_left+0x26>
			}
			display_screen_buffer();
 80005c0:	f7ff ff58 	bl	8000474 <display_screen_buffer>
			HAL_Delay(speed);
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f94a 	bl	8000860 <HAL_Delay>
		for(int j = 7; j>=0; j--){
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dac3      	bge.n	8000560 <scroll_text_left+0x1c>
	for(int k = 0; k<strlen(text); k++){
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fdb4 	bl	800014c <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8b6      	bhi.n	800055a <scroll_text_left+0x16>
		}
	}
	/* Making blank space after the text */
	for(int i = 0; i<blank_space; i++){
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	e00a      	b.n	8000608 <scroll_text_left+0xc4>
		shift_screen_buffer_left();
 80005f2:	f7ff ff6b 	bl	80004cc <shift_screen_buffer_left>
		display_screen_buffer();
 80005f6:	f7ff ff3d 	bl	8000474 <display_screen_buffer>
		HAL_Delay(speed);
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f92f 	bl	8000860 <HAL_Delay>
	for(int i = 0; i<blank_space; i++){
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	3301      	adds	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	787b      	ldrb	r3, [r7, #1]
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf0      	blt.n	80005f2 <scroll_text_left+0xae>
	}
}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000dc 	.word	0x200000dc
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <HardFault_Handler+0x4>

08000696 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <MemManage_Handler+0x4>

0800069c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <BusFault_Handler+0x4>

080006a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <UsageFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f8aa 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f000 ff0c 	bl	8001524 <__errno>
 800070c:	4602      	mov	r2, r0
 800070e:	230c      	movs	r3, #12
 8000710:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	200000fc 	.word	0x200000fc
 8000740:	20000110 	.word	0x20000110

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000750:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000752:	e003      	b.n	800075c <LoopCopyDataInit>

08000754 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000756:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000758:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800075a:	3104      	adds	r1, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000760:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000762:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000764:	d3f6      	bcc.n	8000754 <CopyDataInit>
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000768:	e002      	b.n	8000770 <LoopFillZerobss>

0800076a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800076c:	f842 3b04 	str.w	r3, [r2], #4

08000770 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000772:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000774:	d3f9      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000776:	f7ff ffe5 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f000 fed9 	bl	8001530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fced 	bl	800015c <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r3, =_sidata
 8000784:	08001f50 	.word	0x08001f50
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800078c:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 8000790:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 8000794:	20000110 	.word	0x20000110

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f929 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff ff32 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f933 	bl	8000a52 <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000804:	f000 f909 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000050 	.word	0x20000050
 8000820:	20000058 	.word	0x20000058
 8000824:	20000054 	.word	0x20000054

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000058 	.word	0x20000058
 8000848:	20000108 	.word	0x20000108

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000108 	.word	0x20000108

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_Delay+0x40>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000058 	.word	0x20000058

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e4:	f7ff ff90 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff49 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff5e 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff90 	bl	800095c <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5f 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffb0 	bl	80009c0 <SysTick_Config>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e127      	b.n	8000cd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a80:	2201      	movs	r2, #1
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	4013      	ands	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	f040 8116 	bne.w	8000cca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b12      	cmp	r3, #18
 8000aa4:	d034      	beq.n	8000b10 <HAL_GPIO_Init+0xa4>
 8000aa6:	2b12      	cmp	r3, #18
 8000aa8:	d80d      	bhi.n	8000ac6 <HAL_GPIO_Init+0x5a>
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d02b      	beq.n	8000b06 <HAL_GPIO_Init+0x9a>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d804      	bhi.n	8000abc <HAL_GPIO_Init+0x50>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d031      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d01c      	beq.n	8000af4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aba:	e048      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d043      	beq.n	8000b48 <HAL_GPIO_Init+0xdc>
 8000ac0:	2b11      	cmp	r3, #17
 8000ac2:	d01b      	beq.n	8000afc <HAL_GPIO_Init+0x90>
          break;
 8000ac4:	e043      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ac6:	4a89      	ldr	r2, [pc, #548]	; (8000cec <HAL_GPIO_Init+0x280>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d026      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
 8000acc:	4a87      	ldr	r2, [pc, #540]	; (8000cec <HAL_GPIO_Init+0x280>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d806      	bhi.n	8000ae0 <HAL_GPIO_Init+0x74>
 8000ad2:	4a87      	ldr	r2, [pc, #540]	; (8000cf0 <HAL_GPIO_Init+0x284>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d020      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
 8000ad8:	4a86      	ldr	r2, [pc, #536]	; (8000cf4 <HAL_GPIO_Init+0x288>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d01d      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
          break;
 8000ade:	e036      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ae0:	4a85      	ldr	r2, [pc, #532]	; (8000cf8 <HAL_GPIO_Init+0x28c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d019      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
 8000ae6:	4a85      	ldr	r2, [pc, #532]	; (8000cfc <HAL_GPIO_Init+0x290>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d016      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
 8000aec:	4a84      	ldr	r2, [pc, #528]	; (8000d00 <HAL_GPIO_Init+0x294>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d013      	beq.n	8000b1a <HAL_GPIO_Init+0xae>
          break;
 8000af2:	e02c      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e028      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	3304      	adds	r3, #4
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e023      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e01e      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	330c      	adds	r3, #12
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e019      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b22:	2304      	movs	r3, #4
 8000b24:	623b      	str	r3, [r7, #32]
          break;
 8000b26:	e012      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d105      	bne.n	8000b3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	611a      	str	r2, [r3, #16]
          break;
 8000b3a:	e008      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	615a      	str	r2, [r3, #20]
          break;
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	2bff      	cmp	r3, #255	; 0xff
 8000b52:	d801      	bhi.n	8000b58 <HAL_GPIO_Init+0xec>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	e001      	b.n	8000b5c <HAL_GPIO_Init+0xf0>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2bff      	cmp	r3, #255	; 0xff
 8000b62:	d802      	bhi.n	8000b6a <HAL_GPIO_Init+0xfe>
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	e002      	b.n	8000b70 <HAL_GPIO_Init+0x104>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	3b08      	subs	r3, #8
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	210f      	movs	r1, #15
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	401a      	ands	r2, r3
 8000b82:	6a39      	ldr	r1, [r7, #32]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f000 8096 	beq.w	8000cca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9e:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <HAL_GPIO_Init+0x298>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a58      	ldr	r2, [pc, #352]	; (8000d04 <HAL_GPIO_Init+0x298>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b56      	ldr	r3, [pc, #344]	; (8000d04 <HAL_GPIO_Init+0x298>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb6:	4a54      	ldr	r2, [pc, #336]	; (8000d08 <HAL_GPIO_Init+0x29c>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <HAL_GPIO_Init+0x2a0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d013      	beq.n	8000c0a <HAL_GPIO_Init+0x19e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a4a      	ldr	r2, [pc, #296]	; (8000d10 <HAL_GPIO_Init+0x2a4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d00d      	beq.n	8000c06 <HAL_GPIO_Init+0x19a>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a49      	ldr	r2, [pc, #292]	; (8000d14 <HAL_GPIO_Init+0x2a8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d007      	beq.n	8000c02 <HAL_GPIO_Init+0x196>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a48      	ldr	r2, [pc, #288]	; (8000d18 <HAL_GPIO_Init+0x2ac>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_GPIO_Init+0x192>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x1a0>
 8000bfe:	2304      	movs	r3, #4
 8000c00:	e004      	b.n	8000c0c <HAL_GPIO_Init+0x1a0>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e002      	b.n	8000c0c <HAL_GPIO_Init+0x1a0>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <HAL_GPIO_Init+0x1a0>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	0092      	lsls	r2, r2, #2
 8000c14:	4093      	lsls	r3, r2
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c1c:	493a      	ldr	r1, [pc, #232]	; (8000d08 <HAL_GPIO_Init+0x29c>)
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4938      	ldr	r1, [pc, #224]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4933      	ldr	r1, [pc, #204]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d006      	beq.n	8000c6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	492e      	ldr	r1, [pc, #184]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	604b      	str	r3, [r1, #4]
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4929      	ldr	r1, [pc, #164]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	4924      	ldr	r1, [pc, #144]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	608b      	str	r3, [r1, #8]
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	491f      	ldr	r1, [pc, #124]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	491a      	ldr	r1, [pc, #104]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60cb      	str	r3, [r1, #12]
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4915      	ldr	r1, [pc, #84]	; (8000d1c <HAL_GPIO_Init+0x2b0>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	3301      	adds	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f aed0 	bne.w	8000a80 <HAL_GPIO_Init+0x14>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	372c      	adds	r7, #44	; 0x2c
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	10210000 	.word	0x10210000
 8000cf0:	10110000 	.word	0x10110000
 8000cf4:	10120000 	.word	0x10120000
 8000cf8:	10310000 	.word	0x10310000
 8000cfc:	10320000 	.word	0x10320000
 8000d00:	10220000 	.word	0x10220000
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d30:	787b      	ldrb	r3, [r7, #1]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3c:	e003      	b.n	8000d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e26c      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e246      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fd0e 	bl	800084c <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fd0a 	bl	800084c <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e1fa      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcfa 	bl	800084c <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fcf6 	bl	800084c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1e6      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1ba      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fcaf 	bl	800084c <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fcab 	bl	800084c <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e19b      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc8e 	bl	800084c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc8a 	bl	800084c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e17a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc6e 	bl	800084c <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc6a 	bl	800084c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e15a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 faa8 	bl	80014e8 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc54 	bl	800084c <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fc50 	bl	800084c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e140      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b9e      	ldr	r3, [pc, #632]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b97      	ldr	r3, [pc, #604]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a93      	ldr	r2, [pc, #588]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b8e      	ldr	r3, [pc, #568]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a8a      	ldr	r2, [pc, #552]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fc11 	bl	800084c <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fc0d 	bl	800084c <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	; 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0fd      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b76      	ldr	r3, [pc, #472]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a75      	ldr	r2, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a72      	ldr	r2, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a6c      	ldr	r2, [pc, #432]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a69      	ldr	r2, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fbc1 	bl	800084c <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fbbd 	bl	800084c <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0ab      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbab 	bl	800084c <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fba7 	bl	800084c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e095      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8081 	beq.w	800123a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fb7b 	bl	800084c <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fb77 	bl	800084c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e067      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	492d      	ldr	r1, [pc, #180]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb4b 	bl	800084c <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fb47 	bl	800084c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e037      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e02f      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb34 	bl	800084c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fb30 	bl	800084c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e020      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e018      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e013      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	42420060 	.word	0x42420060

08001250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4965      	ldr	r1, [pc, #404]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa84 	bl	800084c <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fa80 	bl	800084c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4601      	mov	r1, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	fa21 f303 	lsr.w	r3, r1, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f9e2 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000
 8001414:	40021000 	.word	0x40021000
 8001418:	08001f04 	.word	0x08001f04
 800141c:	20000050 	.word	0x20000050
 8001420:	20000054 	.word	0x20000054

08001424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b490      	push	{r4, r7}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800142c:	1d3c      	adds	r4, r7, #4
 800142e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x40>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x46>
 8001462:	e02d      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	e02d      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001476:	4413      	add	r3, r2
 8001478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800147c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	0c5b      	lsrs	r3, r3, #17
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001496:	4413      	add	r3, r2
 8001498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800149c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a2:	fb02 f203 	mul.w	r2, r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	623b      	str	r3, [r7, #32]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c2:	623b      	str	r3, [r7, #32]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc90      	pop	{r4, r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	08001ef0 	.word	0x08001ef0
 80014d8:	08001f00 	.word	0x08001f00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	007a1200 	.word	0x007a1200
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <RCC_Delay+0x34>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <RCC_Delay+0x38>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	fb02 f303 	mul.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001504:	bf00      	nop
  }
  while (Delay --);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f9      	bne.n	8001504 <RCC_Delay+0x1c>
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000050 	.word	0x20000050
 8001520:	10624dd3 	.word	0x10624dd3

08001524 <__errno>:
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <__errno+0x8>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000005c 	.word	0x2000005c

08001530 <__libc_init_array>:
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	2500      	movs	r5, #0
 8001534:	4e0c      	ldr	r6, [pc, #48]	; (8001568 <__libc_init_array+0x38>)
 8001536:	4c0d      	ldr	r4, [pc, #52]	; (800156c <__libc_init_array+0x3c>)
 8001538:	1ba4      	subs	r4, r4, r6
 800153a:	10a4      	asrs	r4, r4, #2
 800153c:	42a5      	cmp	r5, r4
 800153e:	d109      	bne.n	8001554 <__libc_init_array+0x24>
 8001540:	f000 fcc8 	bl	8001ed4 <_init>
 8001544:	2500      	movs	r5, #0
 8001546:	4e0a      	ldr	r6, [pc, #40]	; (8001570 <__libc_init_array+0x40>)
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <__libc_init_array+0x44>)
 800154a:	1ba4      	subs	r4, r4, r6
 800154c:	10a4      	asrs	r4, r4, #2
 800154e:	42a5      	cmp	r5, r4
 8001550:	d105      	bne.n	800155e <__libc_init_array+0x2e>
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001558:	4798      	blx	r3
 800155a:	3501      	adds	r5, #1
 800155c:	e7ee      	b.n	800153c <__libc_init_array+0xc>
 800155e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001562:	4798      	blx	r3
 8001564:	3501      	adds	r5, #1
 8001566:	e7f2      	b.n	800154e <__libc_init_array+0x1e>
 8001568:	08001f48 	.word	0x08001f48
 800156c:	08001f48 	.word	0x08001f48
 8001570:	08001f48 	.word	0x08001f48
 8001574:	08001f4c 	.word	0x08001f4c

08001578 <memset>:
 8001578:	4603      	mov	r3, r0
 800157a:	4402      	add	r2, r0
 800157c:	4293      	cmp	r3, r2
 800157e:	d100      	bne.n	8001582 <memset+0xa>
 8001580:	4770      	bx	lr
 8001582:	f803 1b01 	strb.w	r1, [r3], #1
 8001586:	e7f9      	b.n	800157c <memset+0x4>

08001588 <srand>:
 8001588:	b538      	push	{r3, r4, r5, lr}
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <srand+0x38>)
 800158c:	4605      	mov	r5, r0
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001592:	b97b      	cbnz	r3, 80015b4 <srand+0x2c>
 8001594:	2018      	movs	r0, #24
 8001596:	f000 f89b 	bl	80016d0 <malloc>
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <srand+0x3c>)
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <srand+0x40>)
 800159e:	63a0      	str	r0, [r4, #56]	; 0x38
 80015a0:	e9c0 2300 	strd	r2, r3, [r0]
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <srand+0x44>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	6083      	str	r3, [r0, #8]
 80015aa:	230b      	movs	r3, #11
 80015ac:	8183      	strh	r3, [r0, #12]
 80015ae:	2300      	movs	r3, #0
 80015b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80015b4:	2200      	movs	r2, #0
 80015b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015b8:	611d      	str	r5, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	bd38      	pop	{r3, r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	2000005c 	.word	0x2000005c
 80015c4:	abcd330e 	.word	0xabcd330e
 80015c8:	e66d1234 	.word	0xe66d1234
 80015cc:	0005deec 	.word	0x0005deec

080015d0 <rand>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <rand+0x50>)
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015d8:	b97b      	cbnz	r3, 80015fa <rand+0x2a>
 80015da:	2018      	movs	r0, #24
 80015dc:	f000 f878 	bl	80016d0 <malloc>
 80015e0:	4a10      	ldr	r2, [pc, #64]	; (8001624 <rand+0x54>)
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <rand+0x58>)
 80015e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80015e6:	e9c0 2300 	strd	r2, r3, [r0]
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <rand+0x5c>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	6083      	str	r3, [r0, #8]
 80015f0:	230b      	movs	r3, #11
 80015f2:	8183      	strh	r3, [r0, #12]
 80015f4:	2300      	movs	r3, #0
 80015f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80015fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <rand+0x60>)
 80015fe:	690a      	ldr	r2, [r1, #16]
 8001600:	694b      	ldr	r3, [r1, #20]
 8001602:	4350      	muls	r0, r2
 8001604:	4c0b      	ldr	r4, [pc, #44]	; (8001634 <rand+0x64>)
 8001606:	fb04 0003 	mla	r0, r4, r3, r0
 800160a:	fba2 2304 	umull	r2, r3, r2, r4
 800160e:	4403      	add	r3, r0
 8001610:	1c54      	adds	r4, r2, #1
 8001612:	f143 0500 	adc.w	r5, r3, #0
 8001616:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800161a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800161e:	bd38      	pop	{r3, r4, r5, pc}
 8001620:	2000005c 	.word	0x2000005c
 8001624:	abcd330e 	.word	0xabcd330e
 8001628:	e66d1234 	.word	0xe66d1234
 800162c:	0005deec 	.word	0x0005deec
 8001630:	5851f42d 	.word	0x5851f42d
 8001634:	4c957f2d 	.word	0x4c957f2d

08001638 <siprintf>:
 8001638:	b40e      	push	{r1, r2, r3}
 800163a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800163e:	b500      	push	{lr}
 8001640:	b09c      	sub	sp, #112	; 0x70
 8001642:	ab1d      	add	r3, sp, #116	; 0x74
 8001644:	9002      	str	r0, [sp, #8]
 8001646:	9006      	str	r0, [sp, #24]
 8001648:	9107      	str	r1, [sp, #28]
 800164a:	9104      	str	r1, [sp, #16]
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <siprintf+0x38>)
 800164e:	4909      	ldr	r1, [pc, #36]	; (8001674 <siprintf+0x3c>)
 8001650:	f853 2b04 	ldr.w	r2, [r3], #4
 8001654:	9105      	str	r1, [sp, #20]
 8001656:	6800      	ldr	r0, [r0, #0]
 8001658:	a902      	add	r1, sp, #8
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	f000 f940 	bl	80018e0 <_svfiprintf_r>
 8001660:	2200      	movs	r2, #0
 8001662:	9b02      	ldr	r3, [sp, #8]
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	b01c      	add	sp, #112	; 0x70
 8001668:	f85d eb04 	ldr.w	lr, [sp], #4
 800166c:	b003      	add	sp, #12
 800166e:	4770      	bx	lr
 8001670:	2000005c 	.word	0x2000005c
 8001674:	ffff0208 	.word	0xffff0208

08001678 <time>:
 8001678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <time+0x30>)
 800167c:	4604      	mov	r4, r0
 800167e:	2200      	movs	r2, #0
 8001680:	4669      	mov	r1, sp
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f000 f812 	bl	80016ac <_gettimeofday_r>
 8001688:	2800      	cmp	r0, #0
 800168a:	da05      	bge.n	8001698 <time+0x20>
 800168c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001694:	e9cd 2300 	strd	r2, r3, [sp]
 8001698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800169c:	b10c      	cbz	r4, 80016a2 <time+0x2a>
 800169e:	e9c4 0100 	strd	r0, r1, [r4]
 80016a2:	b004      	add	sp, #16
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	2000005c 	.word	0x2000005c

080016ac <_gettimeofday_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	2300      	movs	r3, #0
 80016b0:	4c06      	ldr	r4, [pc, #24]	; (80016cc <_gettimeofday_r+0x20>)
 80016b2:	4605      	mov	r5, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	f000 fc03 	bl	8001ec4 <_gettimeofday>
 80016be:	1c43      	adds	r3, r0, #1
 80016c0:	d102      	bne.n	80016c8 <_gettimeofday_r+0x1c>
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	b103      	cbz	r3, 80016c8 <_gettimeofday_r+0x1c>
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
 80016ca:	bf00      	nop
 80016cc:	2000010c 	.word	0x2000010c

080016d0 <malloc>:
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <malloc+0xc>)
 80016d2:	4601      	mov	r1, r0
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f000 b84f 	b.w	8001778 <_malloc_r>
 80016da:	bf00      	nop
 80016dc:	2000005c 	.word	0x2000005c

080016e0 <_free_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4605      	mov	r5, r0
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d043      	beq.n	8001770 <_free_r+0x90>
 80016e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ec:	1f0c      	subs	r4, r1, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bfb8      	it	lt
 80016f2:	18e4      	addlt	r4, r4, r3
 80016f4:	f000 fbb6 	bl	8001e64 <__malloc_lock>
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <_free_r+0x94>)
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	b933      	cbnz	r3, 800170e <_free_r+0x2e>
 8001700:	6063      	str	r3, [r4, #4]
 8001702:	6014      	str	r4, [r2, #0]
 8001704:	4628      	mov	r0, r5
 8001706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800170a:	f000 bbac 	b.w	8001e66 <__malloc_unlock>
 800170e:	42a3      	cmp	r3, r4
 8001710:	d90b      	bls.n	800172a <_free_r+0x4a>
 8001712:	6821      	ldr	r1, [r4, #0]
 8001714:	1862      	adds	r2, r4, r1
 8001716:	4293      	cmp	r3, r2
 8001718:	bf01      	itttt	eq
 800171a:	681a      	ldreq	r2, [r3, #0]
 800171c:	685b      	ldreq	r3, [r3, #4]
 800171e:	1852      	addeq	r2, r2, r1
 8001720:	6022      	streq	r2, [r4, #0]
 8001722:	6063      	str	r3, [r4, #4]
 8001724:	6004      	str	r4, [r0, #0]
 8001726:	e7ed      	b.n	8001704 <_free_r+0x24>
 8001728:	4613      	mov	r3, r2
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	b10a      	cbz	r2, 8001732 <_free_r+0x52>
 800172e:	42a2      	cmp	r2, r4
 8001730:	d9fa      	bls.n	8001728 <_free_r+0x48>
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	1858      	adds	r0, r3, r1
 8001736:	42a0      	cmp	r0, r4
 8001738:	d10b      	bne.n	8001752 <_free_r+0x72>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	4401      	add	r1, r0
 800173e:	1858      	adds	r0, r3, r1
 8001740:	4282      	cmp	r2, r0
 8001742:	6019      	str	r1, [r3, #0]
 8001744:	d1de      	bne.n	8001704 <_free_r+0x24>
 8001746:	6810      	ldr	r0, [r2, #0]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	4401      	add	r1, r0
 800174c:	6019      	str	r1, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	e7d8      	b.n	8001704 <_free_r+0x24>
 8001752:	d902      	bls.n	800175a <_free_r+0x7a>
 8001754:	230c      	movs	r3, #12
 8001756:	602b      	str	r3, [r5, #0]
 8001758:	e7d4      	b.n	8001704 <_free_r+0x24>
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	1821      	adds	r1, r4, r0
 800175e:	428a      	cmp	r2, r1
 8001760:	bf01      	itttt	eq
 8001762:	6811      	ldreq	r1, [r2, #0]
 8001764:	6852      	ldreq	r2, [r2, #4]
 8001766:	1809      	addeq	r1, r1, r0
 8001768:	6021      	streq	r1, [r4, #0]
 800176a:	6062      	str	r2, [r4, #4]
 800176c:	605c      	str	r4, [r3, #4]
 800176e:	e7c9      	b.n	8001704 <_free_r+0x24>
 8001770:	bd38      	pop	{r3, r4, r5, pc}
 8001772:	bf00      	nop
 8001774:	20000100 	.word	0x20000100

08001778 <_malloc_r>:
 8001778:	b570      	push	{r4, r5, r6, lr}
 800177a:	1ccd      	adds	r5, r1, #3
 800177c:	f025 0503 	bic.w	r5, r5, #3
 8001780:	3508      	adds	r5, #8
 8001782:	2d0c      	cmp	r5, #12
 8001784:	bf38      	it	cc
 8001786:	250c      	movcc	r5, #12
 8001788:	2d00      	cmp	r5, #0
 800178a:	4606      	mov	r6, r0
 800178c:	db01      	blt.n	8001792 <_malloc_r+0x1a>
 800178e:	42a9      	cmp	r1, r5
 8001790:	d903      	bls.n	800179a <_malloc_r+0x22>
 8001792:	230c      	movs	r3, #12
 8001794:	6033      	str	r3, [r6, #0]
 8001796:	2000      	movs	r0, #0
 8001798:	bd70      	pop	{r4, r5, r6, pc}
 800179a:	f000 fb63 	bl	8001e64 <__malloc_lock>
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <_malloc_r+0xac>)
 80017a0:	6814      	ldr	r4, [r2, #0]
 80017a2:	4621      	mov	r1, r4
 80017a4:	b991      	cbnz	r1, 80017cc <_malloc_r+0x54>
 80017a6:	4c20      	ldr	r4, [pc, #128]	; (8001828 <_malloc_r+0xb0>)
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	b91b      	cbnz	r3, 80017b4 <_malloc_r+0x3c>
 80017ac:	4630      	mov	r0, r6
 80017ae:	f000 fb17 	bl	8001de0 <_sbrk_r>
 80017b2:	6020      	str	r0, [r4, #0]
 80017b4:	4629      	mov	r1, r5
 80017b6:	4630      	mov	r0, r6
 80017b8:	f000 fb12 	bl	8001de0 <_sbrk_r>
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	d124      	bne.n	800180a <_malloc_r+0x92>
 80017c0:	230c      	movs	r3, #12
 80017c2:	4630      	mov	r0, r6
 80017c4:	6033      	str	r3, [r6, #0]
 80017c6:	f000 fb4e 	bl	8001e66 <__malloc_unlock>
 80017ca:	e7e4      	b.n	8001796 <_malloc_r+0x1e>
 80017cc:	680b      	ldr	r3, [r1, #0]
 80017ce:	1b5b      	subs	r3, r3, r5
 80017d0:	d418      	bmi.n	8001804 <_malloc_r+0x8c>
 80017d2:	2b0b      	cmp	r3, #11
 80017d4:	d90f      	bls.n	80017f6 <_malloc_r+0x7e>
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	18cc      	adds	r4, r1, r3
 80017da:	50cd      	str	r5, [r1, r3]
 80017dc:	4630      	mov	r0, r6
 80017de:	f000 fb42 	bl	8001e66 <__malloc_unlock>
 80017e2:	f104 000b 	add.w	r0, r4, #11
 80017e6:	1d23      	adds	r3, r4, #4
 80017e8:	f020 0007 	bic.w	r0, r0, #7
 80017ec:	1ac3      	subs	r3, r0, r3
 80017ee:	d0d3      	beq.n	8001798 <_malloc_r+0x20>
 80017f0:	425a      	negs	r2, r3
 80017f2:	50e2      	str	r2, [r4, r3]
 80017f4:	e7d0      	b.n	8001798 <_malloc_r+0x20>
 80017f6:	684b      	ldr	r3, [r1, #4]
 80017f8:	428c      	cmp	r4, r1
 80017fa:	bf16      	itet	ne
 80017fc:	6063      	strne	r3, [r4, #4]
 80017fe:	6013      	streq	r3, [r2, #0]
 8001800:	460c      	movne	r4, r1
 8001802:	e7eb      	b.n	80017dc <_malloc_r+0x64>
 8001804:	460c      	mov	r4, r1
 8001806:	6849      	ldr	r1, [r1, #4]
 8001808:	e7cc      	b.n	80017a4 <_malloc_r+0x2c>
 800180a:	1cc4      	adds	r4, r0, #3
 800180c:	f024 0403 	bic.w	r4, r4, #3
 8001810:	42a0      	cmp	r0, r4
 8001812:	d005      	beq.n	8001820 <_malloc_r+0xa8>
 8001814:	1a21      	subs	r1, r4, r0
 8001816:	4630      	mov	r0, r6
 8001818:	f000 fae2 	bl	8001de0 <_sbrk_r>
 800181c:	3001      	adds	r0, #1
 800181e:	d0cf      	beq.n	80017c0 <_malloc_r+0x48>
 8001820:	6025      	str	r5, [r4, #0]
 8001822:	e7db      	b.n	80017dc <_malloc_r+0x64>
 8001824:	20000100 	.word	0x20000100
 8001828:	20000104 	.word	0x20000104

0800182c <__ssputs_r>:
 800182c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001830:	688e      	ldr	r6, [r1, #8]
 8001832:	4682      	mov	sl, r0
 8001834:	429e      	cmp	r6, r3
 8001836:	460c      	mov	r4, r1
 8001838:	4690      	mov	r8, r2
 800183a:	4699      	mov	r9, r3
 800183c:	d837      	bhi.n	80018ae <__ssputs_r+0x82>
 800183e:	898a      	ldrh	r2, [r1, #12]
 8001840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001844:	d031      	beq.n	80018aa <__ssputs_r+0x7e>
 8001846:	2302      	movs	r3, #2
 8001848:	6825      	ldr	r5, [r4, #0]
 800184a:	6909      	ldr	r1, [r1, #16]
 800184c:	1a6f      	subs	r7, r5, r1
 800184e:	6965      	ldr	r5, [r4, #20]
 8001850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001854:	fb95 f5f3 	sdiv	r5, r5, r3
 8001858:	f109 0301 	add.w	r3, r9, #1
 800185c:	443b      	add	r3, r7
 800185e:	429d      	cmp	r5, r3
 8001860:	bf38      	it	cc
 8001862:	461d      	movcc	r5, r3
 8001864:	0553      	lsls	r3, r2, #21
 8001866:	d530      	bpl.n	80018ca <__ssputs_r+0x9e>
 8001868:	4629      	mov	r1, r5
 800186a:	f7ff ff85 	bl	8001778 <_malloc_r>
 800186e:	4606      	mov	r6, r0
 8001870:	b950      	cbnz	r0, 8001888 <__ssputs_r+0x5c>
 8001872:	230c      	movs	r3, #12
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001878:	f8ca 3000 	str.w	r3, [sl]
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001882:	81a3      	strh	r3, [r4, #12]
 8001884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001888:	463a      	mov	r2, r7
 800188a:	6921      	ldr	r1, [r4, #16]
 800188c:	f000 fac6 	bl	8001e1c <memcpy>
 8001890:	89a3      	ldrh	r3, [r4, #12]
 8001892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189a:	81a3      	strh	r3, [r4, #12]
 800189c:	6126      	str	r6, [r4, #16]
 800189e:	443e      	add	r6, r7
 80018a0:	6026      	str	r6, [r4, #0]
 80018a2:	464e      	mov	r6, r9
 80018a4:	6165      	str	r5, [r4, #20]
 80018a6:	1bed      	subs	r5, r5, r7
 80018a8:	60a5      	str	r5, [r4, #8]
 80018aa:	454e      	cmp	r6, r9
 80018ac:	d900      	bls.n	80018b0 <__ssputs_r+0x84>
 80018ae:	464e      	mov	r6, r9
 80018b0:	4632      	mov	r2, r6
 80018b2:	4641      	mov	r1, r8
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	f000 fabc 	bl	8001e32 <memmove>
 80018ba:	68a3      	ldr	r3, [r4, #8]
 80018bc:	2000      	movs	r0, #0
 80018be:	1b9b      	subs	r3, r3, r6
 80018c0:	60a3      	str	r3, [r4, #8]
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	441e      	add	r6, r3
 80018c6:	6026      	str	r6, [r4, #0]
 80018c8:	e7dc      	b.n	8001884 <__ssputs_r+0x58>
 80018ca:	462a      	mov	r2, r5
 80018cc:	f000 facc 	bl	8001e68 <_realloc_r>
 80018d0:	4606      	mov	r6, r0
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d1e2      	bne.n	800189c <__ssputs_r+0x70>
 80018d6:	6921      	ldr	r1, [r4, #16]
 80018d8:	4650      	mov	r0, sl
 80018da:	f7ff ff01 	bl	80016e0 <_free_r>
 80018de:	e7c8      	b.n	8001872 <__ssputs_r+0x46>

080018e0 <_svfiprintf_r>:
 80018e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e4:	461d      	mov	r5, r3
 80018e6:	898b      	ldrh	r3, [r1, #12]
 80018e8:	b09d      	sub	sp, #116	; 0x74
 80018ea:	061f      	lsls	r7, r3, #24
 80018ec:	4680      	mov	r8, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4616      	mov	r6, r2
 80018f2:	d50f      	bpl.n	8001914 <_svfiprintf_r+0x34>
 80018f4:	690b      	ldr	r3, [r1, #16]
 80018f6:	b96b      	cbnz	r3, 8001914 <_svfiprintf_r+0x34>
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	f7ff ff3d 	bl	8001778 <_malloc_r>
 80018fe:	6020      	str	r0, [r4, #0]
 8001900:	6120      	str	r0, [r4, #16]
 8001902:	b928      	cbnz	r0, 8001910 <_svfiprintf_r+0x30>
 8001904:	230c      	movs	r3, #12
 8001906:	f8c8 3000 	str.w	r3, [r8]
 800190a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800190e:	e0c8      	b.n	8001aa2 <_svfiprintf_r+0x1c2>
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	6163      	str	r3, [r4, #20]
 8001914:	2300      	movs	r3, #0
 8001916:	9309      	str	r3, [sp, #36]	; 0x24
 8001918:	2320      	movs	r3, #32
 800191a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800191e:	2330      	movs	r3, #48	; 0x30
 8001920:	f04f 0b01 	mov.w	fp, #1
 8001924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001928:	9503      	str	r5, [sp, #12]
 800192a:	4637      	mov	r7, r6
 800192c:	463d      	mov	r5, r7
 800192e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001932:	b10b      	cbz	r3, 8001938 <_svfiprintf_r+0x58>
 8001934:	2b25      	cmp	r3, #37	; 0x25
 8001936:	d13e      	bne.n	80019b6 <_svfiprintf_r+0xd6>
 8001938:	ebb7 0a06 	subs.w	sl, r7, r6
 800193c:	d00b      	beq.n	8001956 <_svfiprintf_r+0x76>
 800193e:	4653      	mov	r3, sl
 8001940:	4632      	mov	r2, r6
 8001942:	4621      	mov	r1, r4
 8001944:	4640      	mov	r0, r8
 8001946:	f7ff ff71 	bl	800182c <__ssputs_r>
 800194a:	3001      	adds	r0, #1
 800194c:	f000 80a4 	beq.w	8001a98 <_svfiprintf_r+0x1b8>
 8001950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001952:	4453      	add	r3, sl
 8001954:	9309      	str	r3, [sp, #36]	; 0x24
 8001956:	783b      	ldrb	r3, [r7, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 809d 	beq.w	8001a98 <_svfiprintf_r+0x1b8>
 800195e:	2300      	movs	r3, #0
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001968:	9304      	str	r3, [sp, #16]
 800196a:	9307      	str	r3, [sp, #28]
 800196c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001970:	931a      	str	r3, [sp, #104]	; 0x68
 8001972:	462f      	mov	r7, r5
 8001974:	2205      	movs	r2, #5
 8001976:	f817 1b01 	ldrb.w	r1, [r7], #1
 800197a:	4850      	ldr	r0, [pc, #320]	; (8001abc <_svfiprintf_r+0x1dc>)
 800197c:	f000 fa40 	bl	8001e00 <memchr>
 8001980:	9b04      	ldr	r3, [sp, #16]
 8001982:	b9d0      	cbnz	r0, 80019ba <_svfiprintf_r+0xda>
 8001984:	06d9      	lsls	r1, r3, #27
 8001986:	bf44      	itt	mi
 8001988:	2220      	movmi	r2, #32
 800198a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800198e:	071a      	lsls	r2, r3, #28
 8001990:	bf44      	itt	mi
 8001992:	222b      	movmi	r2, #43	; 0x2b
 8001994:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001998:	782a      	ldrb	r2, [r5, #0]
 800199a:	2a2a      	cmp	r2, #42	; 0x2a
 800199c:	d015      	beq.n	80019ca <_svfiprintf_r+0xea>
 800199e:	462f      	mov	r7, r5
 80019a0:	2000      	movs	r0, #0
 80019a2:	250a      	movs	r5, #10
 80019a4:	9a07      	ldr	r2, [sp, #28]
 80019a6:	4639      	mov	r1, r7
 80019a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019ac:	3b30      	subs	r3, #48	; 0x30
 80019ae:	2b09      	cmp	r3, #9
 80019b0:	d94d      	bls.n	8001a4e <_svfiprintf_r+0x16e>
 80019b2:	b1b8      	cbz	r0, 80019e4 <_svfiprintf_r+0x104>
 80019b4:	e00f      	b.n	80019d6 <_svfiprintf_r+0xf6>
 80019b6:	462f      	mov	r7, r5
 80019b8:	e7b8      	b.n	800192c <_svfiprintf_r+0x4c>
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <_svfiprintf_r+0x1dc>)
 80019bc:	463d      	mov	r5, r7
 80019be:	1a80      	subs	r0, r0, r2
 80019c0:	fa0b f000 	lsl.w	r0, fp, r0
 80019c4:	4318      	orrs	r0, r3
 80019c6:	9004      	str	r0, [sp, #16]
 80019c8:	e7d3      	b.n	8001972 <_svfiprintf_r+0x92>
 80019ca:	9a03      	ldr	r2, [sp, #12]
 80019cc:	1d11      	adds	r1, r2, #4
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	9103      	str	r1, [sp, #12]
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	db01      	blt.n	80019da <_svfiprintf_r+0xfa>
 80019d6:	9207      	str	r2, [sp, #28]
 80019d8:	e004      	b.n	80019e4 <_svfiprintf_r+0x104>
 80019da:	4252      	negs	r2, r2
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	9207      	str	r2, [sp, #28]
 80019e2:	9304      	str	r3, [sp, #16]
 80019e4:	783b      	ldrb	r3, [r7, #0]
 80019e6:	2b2e      	cmp	r3, #46	; 0x2e
 80019e8:	d10c      	bne.n	8001a04 <_svfiprintf_r+0x124>
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b2a      	cmp	r3, #42	; 0x2a
 80019ee:	d133      	bne.n	8001a58 <_svfiprintf_r+0x178>
 80019f0:	9b03      	ldr	r3, [sp, #12]
 80019f2:	3702      	adds	r7, #2
 80019f4:	1d1a      	adds	r2, r3, #4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	9203      	str	r2, [sp, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bfb8      	it	lt
 80019fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001a02:	9305      	str	r3, [sp, #20]
 8001a04:	4d2e      	ldr	r5, [pc, #184]	; (8001ac0 <_svfiprintf_r+0x1e0>)
 8001a06:	2203      	movs	r2, #3
 8001a08:	7839      	ldrb	r1, [r7, #0]
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f000 f9f8 	bl	8001e00 <memchr>
 8001a10:	b138      	cbz	r0, 8001a22 <_svfiprintf_r+0x142>
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	1b40      	subs	r0, r0, r5
 8001a16:	fa03 f000 	lsl.w	r0, r3, r0
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	3701      	adds	r7, #1
 8001a1e:	4303      	orrs	r3, r0
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	7839      	ldrb	r1, [r7, #0]
 8001a24:	2206      	movs	r2, #6
 8001a26:	4827      	ldr	r0, [pc, #156]	; (8001ac4 <_svfiprintf_r+0x1e4>)
 8001a28:	1c7e      	adds	r6, r7, #1
 8001a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a2e:	f000 f9e7 	bl	8001e00 <memchr>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d038      	beq.n	8001aa8 <_svfiprintf_r+0x1c8>
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <_svfiprintf_r+0x1e8>)
 8001a38:	bb13      	cbnz	r3, 8001a80 <_svfiprintf_r+0x1a0>
 8001a3a:	9b03      	ldr	r3, [sp, #12]
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	f023 0307 	bic.w	r3, r3, #7
 8001a42:	3308      	adds	r3, #8
 8001a44:	9303      	str	r3, [sp, #12]
 8001a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a48:	444b      	add	r3, r9
 8001a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a4c:	e76d      	b.n	800192a <_svfiprintf_r+0x4a>
 8001a4e:	fb05 3202 	mla	r2, r5, r2, r3
 8001a52:	2001      	movs	r0, #1
 8001a54:	460f      	mov	r7, r1
 8001a56:	e7a6      	b.n	80019a6 <_svfiprintf_r+0xc6>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	250a      	movs	r5, #10
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	3701      	adds	r7, #1
 8001a60:	9305      	str	r3, [sp, #20]
 8001a62:	4638      	mov	r0, r7
 8001a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a68:	3a30      	subs	r2, #48	; 0x30
 8001a6a:	2a09      	cmp	r2, #9
 8001a6c:	d903      	bls.n	8001a76 <_svfiprintf_r+0x196>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0c8      	beq.n	8001a04 <_svfiprintf_r+0x124>
 8001a72:	9105      	str	r1, [sp, #20]
 8001a74:	e7c6      	b.n	8001a04 <_svfiprintf_r+0x124>
 8001a76:	fb05 2101 	mla	r1, r5, r1, r2
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	4607      	mov	r7, r0
 8001a7e:	e7f0      	b.n	8001a62 <_svfiprintf_r+0x182>
 8001a80:	ab03      	add	r3, sp, #12
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4622      	mov	r2, r4
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_svfiprintf_r+0x1ec>)
 8001a88:	a904      	add	r1, sp, #16
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	f3af 8000 	nop.w
 8001a90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001a94:	4681      	mov	r9, r0
 8001a96:	d1d6      	bne.n	8001a46 <_svfiprintf_r+0x166>
 8001a98:	89a3      	ldrh	r3, [r4, #12]
 8001a9a:	065b      	lsls	r3, r3, #25
 8001a9c:	f53f af35 	bmi.w	800190a <_svfiprintf_r+0x2a>
 8001aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001aa2:	b01d      	add	sp, #116	; 0x74
 8001aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa8:	ab03      	add	r3, sp, #12
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	4622      	mov	r2, r4
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_svfiprintf_r+0x1ec>)
 8001ab0:	a904      	add	r1, sp, #16
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	f000 f882 	bl	8001bbc <_printf_i>
 8001ab8:	e7ea      	b.n	8001a90 <_svfiprintf_r+0x1b0>
 8001aba:	bf00      	nop
 8001abc:	08001f14 	.word	0x08001f14
 8001ac0:	08001f1a 	.word	0x08001f1a
 8001ac4:	08001f1e 	.word	0x08001f1e
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	0800182d 	.word	0x0800182d

08001ad0 <_printf_common>:
 8001ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad4:	4691      	mov	r9, r2
 8001ad6:	461f      	mov	r7, r3
 8001ad8:	688a      	ldr	r2, [r1, #8]
 8001ada:	690b      	ldr	r3, [r1, #16]
 8001adc:	4606      	mov	r6, r0
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	bfb8      	it	lt
 8001ae2:	4613      	movlt	r3, r2
 8001ae4:	f8c9 3000 	str.w	r3, [r9]
 8001ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001aec:	460c      	mov	r4, r1
 8001aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001af2:	b112      	cbz	r2, 8001afa <_printf_common+0x2a>
 8001af4:	3301      	adds	r3, #1
 8001af6:	f8c9 3000 	str.w	r3, [r9]
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	0699      	lsls	r1, r3, #26
 8001afe:	bf42      	ittt	mi
 8001b00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b04:	3302      	addmi	r3, #2
 8001b06:	f8c9 3000 	strmi.w	r3, [r9]
 8001b0a:	6825      	ldr	r5, [r4, #0]
 8001b0c:	f015 0506 	ands.w	r5, r5, #6
 8001b10:	d107      	bne.n	8001b22 <_printf_common+0x52>
 8001b12:	f104 0a19 	add.w	sl, r4, #25
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	f8d9 2000 	ldr.w	r2, [r9]
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	42ab      	cmp	r3, r5
 8001b20:	dc29      	bgt.n	8001b76 <_printf_common+0xa6>
 8001b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	3300      	adds	r3, #0
 8001b2a:	bf18      	it	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	0692      	lsls	r2, r2, #26
 8001b30:	d42e      	bmi.n	8001b90 <_printf_common+0xc0>
 8001b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b36:	4639      	mov	r1, r7
 8001b38:	4630      	mov	r0, r6
 8001b3a:	47c0      	blx	r8
 8001b3c:	3001      	adds	r0, #1
 8001b3e:	d021      	beq.n	8001b84 <_printf_common+0xb4>
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	68e5      	ldr	r5, [r4, #12]
 8001b44:	f003 0306 	and.w	r3, r3, #6
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	bf18      	it	ne
 8001b4c:	2500      	movne	r5, #0
 8001b4e:	f8d9 2000 	ldr.w	r2, [r9]
 8001b52:	f04f 0900 	mov.w	r9, #0
 8001b56:	bf08      	it	eq
 8001b58:	1aad      	subeq	r5, r5, r2
 8001b5a:	68a3      	ldr	r3, [r4, #8]
 8001b5c:	6922      	ldr	r2, [r4, #16]
 8001b5e:	bf08      	it	eq
 8001b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b64:	4293      	cmp	r3, r2
 8001b66:	bfc4      	itt	gt
 8001b68:	1a9b      	subgt	r3, r3, r2
 8001b6a:	18ed      	addgt	r5, r5, r3
 8001b6c:	341a      	adds	r4, #26
 8001b6e:	454d      	cmp	r5, r9
 8001b70:	d11a      	bne.n	8001ba8 <_printf_common+0xd8>
 8001b72:	2000      	movs	r0, #0
 8001b74:	e008      	b.n	8001b88 <_printf_common+0xb8>
 8001b76:	2301      	movs	r3, #1
 8001b78:	4652      	mov	r2, sl
 8001b7a:	4639      	mov	r1, r7
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	47c0      	blx	r8
 8001b80:	3001      	adds	r0, #1
 8001b82:	d103      	bne.n	8001b8c <_printf_common+0xbc>
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b8c:	3501      	adds	r5, #1
 8001b8e:	e7c2      	b.n	8001b16 <_printf_common+0x46>
 8001b90:	2030      	movs	r0, #48	; 0x30
 8001b92:	18e1      	adds	r1, r4, r3
 8001b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b9e:	4422      	add	r2, r4
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ba6:	e7c4      	b.n	8001b32 <_printf_common+0x62>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	4622      	mov	r2, r4
 8001bac:	4639      	mov	r1, r7
 8001bae:	4630      	mov	r0, r6
 8001bb0:	47c0      	blx	r8
 8001bb2:	3001      	adds	r0, #1
 8001bb4:	d0e6      	beq.n	8001b84 <_printf_common+0xb4>
 8001bb6:	f109 0901 	add.w	r9, r9, #1
 8001bba:	e7d8      	b.n	8001b6e <_printf_common+0x9e>

08001bbc <_printf_i>:
 8001bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bc4:	460c      	mov	r4, r1
 8001bc6:	7e09      	ldrb	r1, [r1, #24]
 8001bc8:	b085      	sub	sp, #20
 8001bca:	296e      	cmp	r1, #110	; 0x6e
 8001bcc:	4617      	mov	r7, r2
 8001bce:	4606      	mov	r6, r0
 8001bd0:	4698      	mov	r8, r3
 8001bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bd4:	f000 80b3 	beq.w	8001d3e <_printf_i+0x182>
 8001bd8:	d822      	bhi.n	8001c20 <_printf_i+0x64>
 8001bda:	2963      	cmp	r1, #99	; 0x63
 8001bdc:	d036      	beq.n	8001c4c <_printf_i+0x90>
 8001bde:	d80a      	bhi.n	8001bf6 <_printf_i+0x3a>
 8001be0:	2900      	cmp	r1, #0
 8001be2:	f000 80b9 	beq.w	8001d58 <_printf_i+0x19c>
 8001be6:	2958      	cmp	r1, #88	; 0x58
 8001be8:	f000 8083 	beq.w	8001cf2 <_printf_i+0x136>
 8001bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001bf4:	e032      	b.n	8001c5c <_printf_i+0xa0>
 8001bf6:	2964      	cmp	r1, #100	; 0x64
 8001bf8:	d001      	beq.n	8001bfe <_printf_i+0x42>
 8001bfa:	2969      	cmp	r1, #105	; 0x69
 8001bfc:	d1f6      	bne.n	8001bec <_printf_i+0x30>
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	0605      	lsls	r5, r0, #24
 8001c04:	f103 0104 	add.w	r1, r3, #4
 8001c08:	d52a      	bpl.n	8001c60 <_printf_i+0xa4>
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da03      	bge.n	8001c1a <_printf_i+0x5e>
 8001c12:	222d      	movs	r2, #45	; 0x2d
 8001c14:	425b      	negs	r3, r3
 8001c16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c1a:	486f      	ldr	r0, [pc, #444]	; (8001dd8 <_printf_i+0x21c>)
 8001c1c:	220a      	movs	r2, #10
 8001c1e:	e039      	b.n	8001c94 <_printf_i+0xd8>
 8001c20:	2973      	cmp	r1, #115	; 0x73
 8001c22:	f000 809d 	beq.w	8001d60 <_printf_i+0x1a4>
 8001c26:	d808      	bhi.n	8001c3a <_printf_i+0x7e>
 8001c28:	296f      	cmp	r1, #111	; 0x6f
 8001c2a:	d020      	beq.n	8001c6e <_printf_i+0xb2>
 8001c2c:	2970      	cmp	r1, #112	; 0x70
 8001c2e:	d1dd      	bne.n	8001bec <_printf_i+0x30>
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f043 0320 	orr.w	r3, r3, #32
 8001c36:	6023      	str	r3, [r4, #0]
 8001c38:	e003      	b.n	8001c42 <_printf_i+0x86>
 8001c3a:	2975      	cmp	r1, #117	; 0x75
 8001c3c:	d017      	beq.n	8001c6e <_printf_i+0xb2>
 8001c3e:	2978      	cmp	r1, #120	; 0x78
 8001c40:	d1d4      	bne.n	8001bec <_printf_i+0x30>
 8001c42:	2378      	movs	r3, #120	; 0x78
 8001c44:	4865      	ldr	r0, [pc, #404]	; (8001ddc <_printf_i+0x220>)
 8001c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c4a:	e055      	b.n	8001cf8 <_printf_i+0x13c>
 8001c4c:	6813      	ldr	r3, [r2, #0]
 8001c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c52:	1d19      	adds	r1, r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6011      	str	r1, [r2, #0]
 8001c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e08c      	b.n	8001d7a <_printf_i+0x1be>
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c66:	6011      	str	r1, [r2, #0]
 8001c68:	bf18      	it	ne
 8001c6a:	b21b      	sxthne	r3, r3
 8001c6c:	e7cf      	b.n	8001c0e <_printf_i+0x52>
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	6825      	ldr	r5, [r4, #0]
 8001c72:	1d18      	adds	r0, r3, #4
 8001c74:	6010      	str	r0, [r2, #0]
 8001c76:	0628      	lsls	r0, r5, #24
 8001c78:	d501      	bpl.n	8001c7e <_printf_i+0xc2>
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e002      	b.n	8001c84 <_printf_i+0xc8>
 8001c7e:	0668      	lsls	r0, r5, #25
 8001c80:	d5fb      	bpl.n	8001c7a <_printf_i+0xbe>
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	296f      	cmp	r1, #111	; 0x6f
 8001c86:	bf14      	ite	ne
 8001c88:	220a      	movne	r2, #10
 8001c8a:	2208      	moveq	r2, #8
 8001c8c:	4852      	ldr	r0, [pc, #328]	; (8001dd8 <_printf_i+0x21c>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c94:	6865      	ldr	r5, [r4, #4]
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	60a5      	str	r5, [r4, #8]
 8001c9a:	f2c0 8095 	blt.w	8001dc8 <_printf_i+0x20c>
 8001c9e:	6821      	ldr	r1, [r4, #0]
 8001ca0:	f021 0104 	bic.w	r1, r1, #4
 8001ca4:	6021      	str	r1, [r4, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13d      	bne.n	8001d26 <_printf_i+0x16a>
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	f040 808e 	bne.w	8001dcc <_printf_i+0x210>
 8001cb0:	4665      	mov	r5, ip
 8001cb2:	2a08      	cmp	r2, #8
 8001cb4:	d10b      	bne.n	8001cce <_printf_i+0x112>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	07db      	lsls	r3, r3, #31
 8001cba:	d508      	bpl.n	8001cce <_printf_i+0x112>
 8001cbc:	6923      	ldr	r3, [r4, #16]
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	bfde      	ittt	le
 8001cc4:	2330      	movle	r3, #48	; 0x30
 8001cc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001cce:	ebac 0305 	sub.w	r3, ip, r5
 8001cd2:	6123      	str	r3, [r4, #16]
 8001cd4:	f8cd 8000 	str.w	r8, [sp]
 8001cd8:	463b      	mov	r3, r7
 8001cda:	aa03      	add	r2, sp, #12
 8001cdc:	4621      	mov	r1, r4
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f7ff fef6 	bl	8001ad0 <_printf_common>
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	d14d      	bne.n	8001d84 <_printf_i+0x1c8>
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cec:	b005      	add	sp, #20
 8001cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf2:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <_printf_i+0x21c>)
 8001cf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	6821      	ldr	r1, [r4, #0]
 8001cfc:	1d1d      	adds	r5, r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6015      	str	r5, [r2, #0]
 8001d02:	060a      	lsls	r2, r1, #24
 8001d04:	d50b      	bpl.n	8001d1e <_printf_i+0x162>
 8001d06:	07ca      	lsls	r2, r1, #31
 8001d08:	bf44      	itt	mi
 8001d0a:	f041 0120 	orrmi.w	r1, r1, #32
 8001d0e:	6021      	strmi	r1, [r4, #0]
 8001d10:	b91b      	cbnz	r3, 8001d1a <_printf_i+0x15e>
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	f022 0220 	bic.w	r2, r2, #32
 8001d18:	6022      	str	r2, [r4, #0]
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	e7b7      	b.n	8001c8e <_printf_i+0xd2>
 8001d1e:	064d      	lsls	r5, r1, #25
 8001d20:	bf48      	it	mi
 8001d22:	b29b      	uxthmi	r3, r3
 8001d24:	e7ef      	b.n	8001d06 <_printf_i+0x14a>
 8001d26:	4665      	mov	r5, ip
 8001d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2c:	fb02 3311 	mls	r3, r2, r1, r3
 8001d30:	5cc3      	ldrb	r3, [r0, r3]
 8001d32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d36:	460b      	mov	r3, r1
 8001d38:	2900      	cmp	r1, #0
 8001d3a:	d1f5      	bne.n	8001d28 <_printf_i+0x16c>
 8001d3c:	e7b9      	b.n	8001cb2 <_printf_i+0xf6>
 8001d3e:	6813      	ldr	r3, [r2, #0]
 8001d40:	6825      	ldr	r5, [r4, #0]
 8001d42:	1d18      	adds	r0, r3, #4
 8001d44:	6961      	ldr	r1, [r4, #20]
 8001d46:	6010      	str	r0, [r2, #0]
 8001d48:	0628      	lsls	r0, r5, #24
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	d501      	bpl.n	8001d52 <_printf_i+0x196>
 8001d4e:	6019      	str	r1, [r3, #0]
 8001d50:	e002      	b.n	8001d58 <_printf_i+0x19c>
 8001d52:	066a      	lsls	r2, r5, #25
 8001d54:	d5fb      	bpl.n	8001d4e <_printf_i+0x192>
 8001d56:	8019      	strh	r1, [r3, #0]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4665      	mov	r5, ip
 8001d5c:	6123      	str	r3, [r4, #16]
 8001d5e:	e7b9      	b.n	8001cd4 <_printf_i+0x118>
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	1d19      	adds	r1, r3, #4
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	681d      	ldr	r5, [r3, #0]
 8001d68:	6862      	ldr	r2, [r4, #4]
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	f000 f847 	bl	8001e00 <memchr>
 8001d72:	b108      	cbz	r0, 8001d78 <_printf_i+0x1bc>
 8001d74:	1b40      	subs	r0, r0, r5
 8001d76:	6060      	str	r0, [r4, #4]
 8001d78:	6863      	ldr	r3, [r4, #4]
 8001d7a:	6123      	str	r3, [r4, #16]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d82:	e7a7      	b.n	8001cd4 <_printf_i+0x118>
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	462a      	mov	r2, r5
 8001d88:	4639      	mov	r1, r7
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	47c0      	blx	r8
 8001d8e:	3001      	adds	r0, #1
 8001d90:	d0aa      	beq.n	8001ce8 <_printf_i+0x12c>
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	079b      	lsls	r3, r3, #30
 8001d96:	d413      	bmi.n	8001dc0 <_printf_i+0x204>
 8001d98:	68e0      	ldr	r0, [r4, #12]
 8001d9a:	9b03      	ldr	r3, [sp, #12]
 8001d9c:	4298      	cmp	r0, r3
 8001d9e:	bfb8      	it	lt
 8001da0:	4618      	movlt	r0, r3
 8001da2:	e7a3      	b.n	8001cec <_printf_i+0x130>
 8001da4:	2301      	movs	r3, #1
 8001da6:	464a      	mov	r2, r9
 8001da8:	4639      	mov	r1, r7
 8001daa:	4630      	mov	r0, r6
 8001dac:	47c0      	blx	r8
 8001dae:	3001      	adds	r0, #1
 8001db0:	d09a      	beq.n	8001ce8 <_printf_i+0x12c>
 8001db2:	3501      	adds	r5, #1
 8001db4:	68e3      	ldr	r3, [r4, #12]
 8001db6:	9a03      	ldr	r2, [sp, #12]
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	42ab      	cmp	r3, r5
 8001dbc:	dcf2      	bgt.n	8001da4 <_printf_i+0x1e8>
 8001dbe:	e7eb      	b.n	8001d98 <_printf_i+0x1dc>
 8001dc0:	2500      	movs	r5, #0
 8001dc2:	f104 0919 	add.w	r9, r4, #25
 8001dc6:	e7f5      	b.n	8001db4 <_printf_i+0x1f8>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ac      	bne.n	8001d26 <_printf_i+0x16a>
 8001dcc:	7803      	ldrb	r3, [r0, #0]
 8001dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dd6:	e76c      	b.n	8001cb2 <_printf_i+0xf6>
 8001dd8:	08001f25 	.word	0x08001f25
 8001ddc:	08001f36 	.word	0x08001f36

08001de0 <_sbrk_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	2300      	movs	r3, #0
 8001de4:	4c05      	ldr	r4, [pc, #20]	; (8001dfc <_sbrk_r+0x1c>)
 8001de6:	4605      	mov	r5, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	f7fe fc74 	bl	80006d8 <_sbrk>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_sbrk_r+0x1a>
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_sbrk_r+0x1a>
 8001df8:	602b      	str	r3, [r5, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	2000010c 	.word	0x2000010c

08001e00 <memchr>:
 8001e00:	b510      	push	{r4, lr}
 8001e02:	b2c9      	uxtb	r1, r1
 8001e04:	4402      	add	r2, r0
 8001e06:	4290      	cmp	r0, r2
 8001e08:	4603      	mov	r3, r0
 8001e0a:	d101      	bne.n	8001e10 <memchr+0x10>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e003      	b.n	8001e18 <memchr+0x18>
 8001e10:	781c      	ldrb	r4, [r3, #0]
 8001e12:	3001      	adds	r0, #1
 8001e14:	428c      	cmp	r4, r1
 8001e16:	d1f6      	bne.n	8001e06 <memchr+0x6>
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <memcpy>:
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	1e43      	subs	r3, r0, #1
 8001e20:	440a      	add	r2, r1
 8001e22:	4291      	cmp	r1, r2
 8001e24:	d100      	bne.n	8001e28 <memcpy+0xc>
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e30:	e7f7      	b.n	8001e22 <memcpy+0x6>

08001e32 <memmove>:
 8001e32:	4288      	cmp	r0, r1
 8001e34:	b510      	push	{r4, lr}
 8001e36:	eb01 0302 	add.w	r3, r1, r2
 8001e3a:	d807      	bhi.n	8001e4c <memmove+0x1a>
 8001e3c:	1e42      	subs	r2, r0, #1
 8001e3e:	4299      	cmp	r1, r3
 8001e40:	d00a      	beq.n	8001e58 <memmove+0x26>
 8001e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001e4a:	e7f8      	b.n	8001e3e <memmove+0xc>
 8001e4c:	4283      	cmp	r3, r0
 8001e4e:	d9f5      	bls.n	8001e3c <memmove+0xa>
 8001e50:	1881      	adds	r1, r0, r2
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	42d3      	cmn	r3, r2
 8001e56:	d100      	bne.n	8001e5a <memmove+0x28>
 8001e58:	bd10      	pop	{r4, pc}
 8001e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001e62:	e7f7      	b.n	8001e54 <memmove+0x22>

08001e64 <__malloc_lock>:
 8001e64:	4770      	bx	lr

08001e66 <__malloc_unlock>:
 8001e66:	4770      	bx	lr

08001e68 <_realloc_r>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	4607      	mov	r7, r0
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	460e      	mov	r6, r1
 8001e70:	b921      	cbnz	r1, 8001e7c <_realloc_r+0x14>
 8001e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e76:	4611      	mov	r1, r2
 8001e78:	f7ff bc7e 	b.w	8001778 <_malloc_r>
 8001e7c:	b922      	cbnz	r2, 8001e88 <_realloc_r+0x20>
 8001e7e:	f7ff fc2f 	bl	80016e0 <_free_r>
 8001e82:	4625      	mov	r5, r4
 8001e84:	4628      	mov	r0, r5
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e88:	f000 f814 	bl	8001eb4 <_malloc_usable_size_r>
 8001e8c:	42a0      	cmp	r0, r4
 8001e8e:	d20f      	bcs.n	8001eb0 <_realloc_r+0x48>
 8001e90:	4621      	mov	r1, r4
 8001e92:	4638      	mov	r0, r7
 8001e94:	f7ff fc70 	bl	8001778 <_malloc_r>
 8001e98:	4605      	mov	r5, r0
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d0f2      	beq.n	8001e84 <_realloc_r+0x1c>
 8001e9e:	4631      	mov	r1, r6
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	f7ff ffbb 	bl	8001e1c <memcpy>
 8001ea6:	4631      	mov	r1, r6
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	f7ff fc19 	bl	80016e0 <_free_r>
 8001eae:	e7e9      	b.n	8001e84 <_realloc_r+0x1c>
 8001eb0:	4635      	mov	r5, r6
 8001eb2:	e7e7      	b.n	8001e84 <_realloc_r+0x1c>

08001eb4 <_malloc_usable_size_r>:
 8001eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eb8:	1f18      	subs	r0, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bfbc      	itt	lt
 8001ebe:	580b      	ldrlt	r3, [r1, r0]
 8001ec0:	18c0      	addlt	r0, r0, r3
 8001ec2:	4770      	bx	lr

08001ec4 <_gettimeofday>:
 8001ec4:	2258      	movs	r2, #88	; 0x58
 8001ec6:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <_gettimeofday+0xc>)
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	4770      	bx	lr
 8001ed0:	2000010c 	.word	0x2000010c

08001ed4 <_init>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	bf00      	nop
 8001ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eda:	bc08      	pop	{r3}
 8001edc:	469e      	mov	lr, r3
 8001ede:	4770      	bx	lr

08001ee0 <_fini>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr
